<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>唧唧歪歪的河马正在打游戏</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mapeiyu.com/"/>
  <updated>2018-06-07T04:16:48.072Z</updated>
  <id>http://mapeiyu.com/</id>
  
  <author>
    <name>马培羽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10分钟带你认识区块链</title>
    <link href="http://mapeiyu.com/2018/06/07/qukuailian/"/>
    <id>http://mapeiyu.com/2018/06/07/qukuailian/</id>
    <published>2018-06-07T04:12:33.000Z</published>
    <updated>2018-06-07T04:16:48.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10分钟带你认识区块链"><a href="#10分钟带你认识区块链" class="headerlink" title="10分钟带你认识区块链"></a>10分钟带你认识区块链</h1><p>刚接触区块链这个概念的时候, 相信很多人都会有跟我一样的疑问: 区块链倒底是什么? 拿来干什么用的? 怎么用? 它和比特币是什么关系?  </p>
<p>你会带着一头的问号打开搜索引擎. 一般会得到如下的解答: </p>
<ul>
<li>区块链会引发下一轮的技术革命</li>
<li>区块链是人类历史上在金融领域最大的突破,  </li>
<li>区块链会引发社会和经济的重大变革.  </li>
<li>有一些反对的意见, 认为区块链的价值被夸大了,  比特币是人类史上最大的泡沫 ….</li>
</ul>
<p>还有更专业一些的回答:</p>
<ul>
<li>区块链就是一个去中心化的分布式帐本. </li>
<li>区块链信息不可篡改. </li>
<li>区块链是比特币的底层协议. 类比于信息互联网的HTTP协议, 区块链就是”价值互联网”的”HTTP协议”. </li>
<li>区块链的最大价值在于它的智能合约系统</li>
</ul>
<p>这很容易给人留下一个复杂, 高深又神秘的印像. 其实抛开用于解决具体问题的一系列复杂的场景. 区块链不过就是一个简单的数据结构. </p>
<p>我认为区块链的复杂不在于他的复杂场景的处理逻辑, 而是在于它的生态形成的内在逻辑. 这个逻辑是比特币之所以流行的原因. 也是众人讨论的焦点. 不过各位不用担心, 在你读完这篇文章的时候, 你一定也可以理解这一点, 我会带着你们由浅入深的进行探讨. </p>
<h2 id="认识区块链"><a href="#认识区块链" class="headerlink" title="认识区块链"></a>认识区块链</h2><p>区块链这个词源于中本聪的比特币白皮书&lt;比特币: 一种点对点的电子现金系统&gt;, 在文中其实并没有区块链这个词, 只有”区块”(Block)和”链”(Chain). 我们就从这两个词来入手. 其实区块链确实就是用”链”连接起来的”区块”而已. </p>
<p><img src="/2018/06/07/qukuailian/blockchain.png" alt=""></p>
<p>也许你会说, 这未免也太简单了吧! 这么个结构,  怎么不可篡改的? 怎么存储帐本的? 怎么去中心化的? 怎么实现比特币的? … 更多的疑问向你袭来. 不要急, 让我们一个一个来分析.</p>
<h4 id="怎样不可篡改"><a href="#怎样不可篡改" class="headerlink" title="怎样不可篡改?"></a>怎样不可篡改?</h4><p>区块链是如何实现不可篡改的呢? 我们把上面的图复杂一下. </p>
<p><img src="/2018/06/07/qukuailian/head.png" alt=""></p>
<p>区块的连接方式是, 下一个新的区块总是指向上一区块的头部的Hash值. 而不可篡改的原因, 正是因为这种Hash指针的连接方式. </p>
<p>这个Hash值是根据区块内容以及一些其它参数经过Hash函数的计算生成的. Hash的原理有兴趣的同学可以自行查阅, 我们只需要知道它的几个主要特点:</p>
<ul>
<li>对于不同的两个初始值, 只有极低到可以忽略不计的机率找到相同的Hash值. </li>
<li>对于不同的Hash值, 其对应的初始值一定不同. </li>
<li>不可逆, 无法通过Hash值倒推出初始值</li>
</ul>
<p>这也就是说, 当一个区块有效生成的时候, 区块的内容是固定的, 其头部的Hash值也是固定的. 这样, 区块链在它最初始的区块(称为创世区块)到最新的区块的链条里面, 其内容都是不容修改的. 任何一个区块的修改, 都会引起链条的脱节. </p>
<p>了解了这一点, 你又会有问题了: 难倒区块链这么脆弱, 如果有黑客把区块的内容改了, 造成了区块链的断开, 那整个区块链会不会挂掉了? 这就涉及到我们要说的下一个问题了.</p>
<h4 id="如何去中心化"><a href="#如何去中心化" class="headerlink" title="如何去中心化?"></a>如何去中心化?</h4><p>前面也提到了, 区块链的一个特点就是去中心化的. 所谓去中心化是与中心化相反的概念. 我们平时使用的网页是中心化的, 因为它需要一个服务器来提供网页服务, 网页服务器挂掉了大家都看不了网页内容. 银行系统是中心化的, 因为它的数据由统一的服务器数据库来保存, 如果数据库挂掉了, 大家的钱就都不见了. 去中心化刚好相反, 没有一个统一的中心服务器来管理, 区块链的数据保存在网络中的每个区块链的节点上. </p>
<p>这也就解决了上一节提出的问题. 如果你的区块链被改动断开了, 对整个区块链是没有影响的,  因为还有其它节点没有断开. 在整个区块链网络中. 你的这个改动会被直接忽略了. </p>
<p>在网络中节点是这样一个概念. </p>
<p><img src="/2018/06/07/qukuailian/jiedian.png" alt=""></p>
<blockquote>
<p>一个网络中的节点存储区块链的所有信息.  这个节点有多大呢?<br>比特币的单个区块, 最大是1M, 大约每10分钟生成一个.  其数据量一年也才增加50G左右. 因为比特币前些年的交易量较小, 一个区块远没有1M,  近两年才可能到达1M, 所以到现在区块总大小也才200G不到而已.<br>PS: 其实比特币的区块大小限制, 以及生成规则限制, 直接决定了比特币能处理的上限为每秒约3.5个交易.  所以近些年比特币圈一直在讨论关于扩容的事.</p>
</blockquote>
<p>每个节点都存储着整个区块链的所有信息, 这些节点称为全节点, 也叫挖矿节点(我们后面会介绍). 在整个网络, 存在众多这样的节点, 它们交织形成区块链的网络. 区块链中每个节点都能与其它的相邻几个节点相互通信连接. </p>
<p>节点间通信的一个最重要的内容就是商量出一个结论: 决定一个区块链应该包含哪些区块. 我们知道, 网络是不可信的, 存在延迟和同步等等问题, 一个一致的结论要如何达成呢?</p>
<p>这就涉及到了区块链的共识算法. 简单来说, 就是所有节点达成一个共识:  只要发现了其它节点的区块链上的链条比自己的链条长, 那就认为那条最长的是区块链, 本地不在这条最长链上的区块, 会被抛弃. 在上面提到的区块链被篡改的例子里, 之所以被改动的区块链会被忽略也是因为这个原因. </p>
<p>讲到这里时, 你可能会问: 如果有一个黑客, 把自己的区块链条改的很长, 会不会控制了整个区块链?  下面一节可以给以解答.</p>
<h4 id="什么是挖矿"><a href="#什么是挖矿" class="headerlink" title="什么是挖矿?"></a>什么是挖矿?</h4><p>在现实世界中, 挖矿是为了赚取收益的, 在区块链中也是一样. 以比特币为例. 比特币的矿工每发现一个新区块, 现在可以赚取12.5个比特币的收益(这个收益每四年减半), 按现在市值大概11W美金, 这个收益还是相当可观的.  </p>
<p>之所以用挖矿来比喻发现一个新区块, 是因为要找到一个新的区块并不简单. 从上文中知道, 区块之间是通过Hash值进行链接的. 但是这个Hash值一定要符合特定的规则才算是一个有效的区块. </p>
<p>我们把上面的区块继续细化, 假设矿工想要”挖”到一个有效的新区块, 他需要进行如下的计算: </p>
<p><img src="/2018/06/07/qukuailian/wakuang.png" alt=""> </p>
<p>有效区块需满足:    <code>H(A, B, C) &lt; 目标Hash值</code>.    其中:</p>
<ul>
<li>H是Hash函数, 比特币使用sha-256算法.</li>
<li>A是区块的内容的Hash值(需注意并不是当前区块的Hash值) </li>
<li>B是一个32位的随机数. 矿工需要通过调整这个值, 来使上面的公式满足.</li>
<li>C称为币基参数, 包含矿工的个人信息和随机数. 当经过2^32次运算后, 如果依然不能使条件满足, 就需要调整币基参数中的随机数, 继续进行遍历B的运算. </li>
</ul>
<p>前面在介绍Hash函数时介绍过, Hash函数是不可逆的. 因此矿工只能通过不断的遍历随机数, 才可能得到目标Hash值的解. 在区块链网络中, 所有的矿工都在竞争去做这样的一道运算题, 期待自己可以先得到答案. </p>
<p>先解出答案的矿工会把生成的新区块连接到自己的区块链的末端, 然后向相邻的节点广播自己最新的区块状态. 相邻节点收到通知后, 会更新自己的区块状态, 然后继续广播出去.  </p>
<p>接到通知的节点除了更新自己的区块状态以外, 还会中止自己在前一区块的挖矿运算, 在新的区块基础上开始新的挖矿运算. 很显然如果它还在原来的基础上挖矿, 即使得到了最终的解,  还是会因为落后其它节点一个区块的长度, 而被废弃.</p>
<p>在这里可以看出, 挖矿的难度非常大, 而且竞争非常激烈. 因此上一节中的问题基本不可能发生, 因为没有一个黑客有如此大的算力可以一直领先其它矿工找到新的区块.</p>
<p>在此还有三点需要说明:</p>
<ul>
<li>每个节点计算的题目都是不同的. 因为大部分情况下区块的内容A都不相同. 即使A完全相同, C也会不同.  所以不存在同解的情况. </li>
<li>如果两个节点同时发现了新的区块. 相邻节点会根据通知的到达顺序, 来决定使用谁的区块. 在传播的过程中, 总有一个会被淘汰.  </li>
<li>条件中<code>目标Hash值</code>不是固定的.  它会根据固定区块产生的频率来自动调整难度. 目标Hash值越小, 难度越大. 最终新区块产生的频率会维持在一个均值. (比特币是10分钟左右)</li>
</ul>
<p>到这里, 我们已经介绍完了, 区块链的产生, 数据结构, 以及组织方式. 不过稍微有点知识的朋友, 可能会有一个关于区块链终极问题的考虑: 区块链的赖以生存的条件就是新区块的产生, 而新区块的产生有赖于挖矿节点对利益的需求, 如果有一天矿被”挖空”了怎么办?</p>
<h4 id="区块链的终极问题"><a href="#区块链的终极问题" class="headerlink" title="区块链的终极问题"></a>区块链的终极问题</h4><p>矿被”挖空”的情况并不是危言耸听, 这一天总是会到来的. 以比特币为例, 比特币的总量为2100万, 到现在已经挖了1700万, 预计到2140年, 全部比特币会被挖空. 这一天的到来意味着, 新产生的区块不会再有比特币奖励. 还会有矿工愿意贡献自己的电量, 存储, 以及硬件设备, 来维持区块链的正常运转吗?</p>
<p>其实这一点我们可以不用担心. 矿工在挖矿中的收益除了来自于区块奖励, 还有一部分就是矿工将交易纳入区块中的手续费用. 这一部分的收益现在还比较低, 但是相信将来应该会成为矿工的主要收益来源. </p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我想你应该已经大概理解了. </p>
<ul>
<li>区块链通过区块来存储数据, 使用Hash指针连接区块, 来保证区块链上内容不可篡改.  </li>
<li>区块链网络中存在很多存储全量区块数据的节点,  节点间通过共识算法使用最长的区块作为区块链,  以此达到去中心化.  </li>
<li>矿工通过挖矿赚取收益，由此保证新区块的产生.  </li>
<li>区块链通过设置有难度的挖矿难题, 来保证区块链的健康运作. </li>
</ul>
<h2 id="认识比特币"><a href="#认识比特币" class="headerlink" title="认识比特币"></a>认识比特币</h2><p>仅管理解了区块链的一些原理, 可能你还会有些迷惑: 比特币是如何在区块链上交易的? 它和我们平时使用的货币有什么区别? 在一个去中心化的网络中, 要怎么证明一个比特币是属于我的呢? …</p>
<p>不用急, 我们先从最基本的谈起. 谈谈比特币是什么?</p>
<h4 id="比特币是什么"><a href="#比特币是什么" class="headerlink" title="比特币是什么?"></a>比特币是什么?</h4><p>我们平时接触的是人民银行发行的流通货币, 称为法币. 拿着它可以跟商店老板一手交钱一手交货, 也可以存入微信, 支付宝刷二维码付款. 它的价值就体现在流通上. </p>
<p>比特币的作用也是类似. 你可以认为比特币就是一种流通的介质. 只不过比特币不同于法币, 无法拿出一个称为比特币的硬币来, 它的存在就是网络世界中的代码. 所以你看到图片中一个着B字的黄色硬币图案, 其实是不存的, 那都是为了表示抽象概念的形象表示而已.</p>
<p><img src="/2018/06/07/qukuailian/bitcoin.png" alt=""> </p>
<p>比特币在区块链的代码中, 不是一个数据结构, 也不是一个对象. 其实就是一个交易的记录. </p>
<p>比特币只能在挖矿得到新区块的奖励中产生, 所以矿工挖到的新区块, 会带有一个初始交易(称为币基交易). 这个初始交易的输入为空, 输出为矿工的帐户和比特币的数量. 因此矿工的帐户增加了相应数额的比特币. </p>
<p>记得我们之前挖矿的一节提到过, 有时需要调整币基参数来遍历解题, 矿工的帐户信息就存在于这个币基参数之中.  </p>
<p>那么, 在比特币中帐户是怎么来的呢?</p>
<h4 id="什么是比特币的帐户"><a href="#什么是比特币的帐户" class="headerlink" title="什么是比特币的帐户?"></a>什么是比特币的帐户?</h4><p>一提到帐户, 读者心中一定会联想起在银行大厅中开户的繁琐流程. 开户, 注册, 提交资料….这些流程无一不是和中心化的体系相联系的. 在一个去中心化的比特币系统中则要简单的多. </p>
<p>比特币帐户的核心是使用密码学中的数字签名方案:</p>
<ul>
<li>用户使用数字签名算法(比特币使用ECDSA)生成一对公钥PK和私钥SK: <code>PK, SK = 生成签名(随机数)</code></li>
<li>对于一段特定的信息message, 可以生成信息签名: <code>sig = 签名函数(SK, message)</code></li>
<li>则可以得到一个验证: <code>isvalid = 验证(PK, message, sig)</code>. </li>
<li>如果验证通过, 可以得到这样一个结论: 信息message是由PK和SK这一对组合发出的, 因为只有PK能验证通过. 换句话说<code>信息message是属于PK和SK的, 签名就是证据</code></li>
</ul>
<p>所以, 在比特币中就把公钥看做一个用户的帐户. 不过一般公钥比较长, 比特币就使用公钥的Hash值看做是用户的收款地址. 所以用户帐户为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PK, SK = 生成签名(随机数);</div><div class="line">用户帐户 = Hash(PK);</div></pre></td></tr></table></figure>
<p>同时, 用户需要保存自己的私钥PK. 以便于交易时, 证明比特币由用户自身持有, 如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">message = &quot;用户A持有2比特币&quot;;//message是资产的证明, 实际中代表区块链中一个真实的交易记录</div><div class="line">sig = 签名函数(SK, message);</div><div class="line">验证通过 = 验证(PK, message, sig) &amp;&amp; (Hash(PK)==用户A的帐户);</div></pre></td></tr></table></figure>
<p>这里的逻辑稍有些复杂, 读者朋友需细细体会. 不太了解也可以先略过. 你只需要知道帐户就是用户定义的一个公钥(银行帐号), 用户需要保存自己的私钥(取钱密码)来使用帐上的钱.</p>
<p>好了. 你现在已经有了一个比特币帐户, 而且帐户上可能还有一些数量的比特币, 应该如何交易呢?</p>
<h4 id="用户如何交易"><a href="#用户如何交易" class="headerlink" title="用户如何交易?"></a>用户如何交易?</h4><p>在刚一开始了解比特币交易时, 我有一个误解. 误以为比特币的交易类似于淘宝, 京东的交易清单, 需要金钱与实物的关联. 可想而知那个数据量需要多么的庞大. </p>
<p>但其实比特币的交易就像是我们银行帐户的里面的转入和转出, 只有转帐地址与转帐数额(交易时间等必要信息)的记录, 其数据量是相当小的. 至于交易的原因, 则由交易双方线下完成. </p>
<p>说到交易就是提到一系列的安全问题:</p>
<ul>
<li>首先你要证明你拥用这笔钱. (对应: 银行帐户的余额)</li>
<li>保证收款人收到了这笔钱. (对应: 收款人收到钱)</li>
<li>保证你没有把这笔钱重复转给了两个人. (对应: 已经转给了帐户A, 就无法再转给帐户B)</li>
</ul>
<p>比特币在交易的设计用一种巧妙的方式解决了这些问题, 我们来一一解答:</p>
<h5 id="归属问题"><a href="#归属问题" class="headerlink" title="归属问题"></a>归属问题</h5><p>在前面介绍比特币来源时, 我们提到了<code>币基交易</code>, 这是由新区块奖励产生的只有输出, 没有输入的一个交易. 币基交易是一类特殊的交易,  用户之间的交易是必须同时存在输入和输出的. 而交易的输入就是之前已存在的交易的输出.</p>
<p>可以这样说: 帐户持有的比特币, 就是帐户对应的交易输出. (这些输出没有作为输入进行交易过). 如下图:</p>
<p><img src="/2018/06/07/qukuailian/jiaoyi.png" alt=""> </p>
<p>图中交易流程表示:帐户A通过币基交易得到12.5个币, 然后交易给帐户B 5个币, 又交易给帐户C 3个币.</p>
<p>我们可以看到, 在对于帐户A一系列的交易记录中, 只有交易3的第二个输出没有作为输入交易过, 所以帐户A的余额就是4.5个币. </p>
<p>你也许会说, 一个帐户可能对应的交易有很多啊. B也可以转给A几个币, C也可以转给A几个币, 这个怎么统计? 如果A想要花一笔大价钱买东西怎么办?</p>
<ul>
<li>A可以把多个交易向自己的输出作为输入, 去向其它帐户交易. </li>
<li>A也可以为了方便, 通过这种方式, 把多个零散的交易输出作为输入, 指定自己为输出, 完成以零换整的过程.</li>
</ul>
<p>另外, 交易的输入和输出不一定是相等的. 用户可以选择输出小于输入, 将这一部分差额作为交易的费用支付给矿工. 因为矿工是负责的记帐的人.</p>
<h5 id="记帐过程"><a href="#记帐过程" class="headerlink" title="记帐过程"></a>记帐过程</h5><p>要确保一项交易的完成, 就需要记帐. 记下帐来就既能确定收帐人拿到了币, 又能保证交款人不能抵赖, 拿同样的钱再去进行别的交易. 比特币是如何记帐的呢?</p>
<p>比特币记帐就是把我们上面提到的交易记录, 存储到区块上. 之前我们提到过生成的区块已经不能修改, 所以新的交易都是记录在新的区块上, 这依赖于矿工的工作. </p>
<p>回到我们之前的挖矿工作上来:</p>
<p><img src="/2018/06/07/qukuailian/meikl.png" alt=""> </p>
<p>矿工在挖矿的时候, 会选择一些交易纳入到区块内容中. 以图中的组织形式(称为梅克尔树)进行编译, 所以得到了挖矿运算需要用到的一个参数 <code>Hash值A</code>. 根据Hash的特性, 对于<code>Hash值A</code>, 就是代表了整个树的信息. 对树上任何交易的修改都会引起Hash值的变化. </p>
<p>刚刚提到矿工会选择交易, 有必要说明一下:</p>
<ul>
<li>每个挖矿节点都会存在一个交易池, 交易池可以监听到区块网络中传递过来的交易信息. </li>
<li>矿工是可以挑选哪些交易进入区块的, 比如交易费比较高的交易. 最终如果生成了有效的区块, 矿工就可以得到相应的交易的差额.</li>
</ul>
<p>是不是新成了包含相应交易的有效区块, 就算交易成功了呢? 不一定哦! 我们之前说过, 新成了有效区块, 并不代表新区块会被纳入区块链, 还有可能被丢弃. 只有在得到区块链中其它节点的共识后, 才算真正的记帐成功. 所以比特币中存在一个<code>交易确认</code>的过程. 一般认为经过6次确认就算交易成功了, 即当前区块链后又生成了6个新的区块. 所以要确定你的交易已经成功, 需要经过大概1个小时. (前面讲过, 新区块生成间隔为大概10分钟) </p>
<p>如果你能够耐心看下来, 流程应该已经了解得差不多了. 想要试着去交易一下了. 但是一个难题摆在面前, 200G的区块链全量数据还是有点太大了, 你又不想去挖矿, 要怎么才能交易呢?</p>
<h5 id="轻量节点-SPV"><a href="#轻量节点-SPV" class="headerlink" title="轻量节点:SPV"></a>轻量节点:SPV</h5><p>其实在比特币系统里, 大部分都是跟你一样的用户, 只关心与自己相关的一小部分交易. 这部分用户就是做为比特币网络中的轻量节点. 这类节点不存储整个比特币区块链, 不会决定区块是否加入区块链, 不挖矿, 只存储和核验与自己相关的一小部分信息. </p>
<p>这类用户使用简单付款验证(SPV)客户端进行交易. 只需要几十M的数据. </p>
<p>讲到这里关于比特币你已了解得差不多了. 原理讲清了, 但好像还缺点什么? </p>
<h2 id="最后你要知道的"><a href="#最后你要知道的" class="headerlink" title="最后你要知道的"></a>最后你要知道的</h2><h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h4><p>智能合约是区块链交易的一个中间环节, 我们知道在比特币交易时, 需要一个输入和输出, 在上面我们举的例子里, 输出只是一个帐户的地址和金额, 在智能合约交易中可以使用脚本地址作为输出地址. </p>
<p>类似于这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OP_DUP OP_HASH160 be10f0a78f5ac63e8746f7f2e62a5663eed05788 OP_EQUALVERIFY OP_CHECKSIG</div></pre></td></tr></table></figure>
<p>在交易被纳入区块链时, 相应的脚本指令会执行. 可以实现如: 第三方支付, 网络众筹, 博彩, 抵押担保, 保险等场景. 因为区块链去中心化以及不可篡改的安全性, 消除了机购存在欺诈的可能性, 提高了效率, 也消除了信任成本, 所以意义非常重大. </p>
<h4 id="其它数字货币"><a href="#其它数字货币" class="headerlink" title="其它数字货币"></a>其它数字货币</h4><p>现在基于区块链的数字货币层出不穷, 大部分币种都是根据比特币衍生出来的. 它们的区别, 在于对比特币一些规则的改动和优化. 如: 调整挖矿算法, 调整区块大小, 调整共识规则, 调整区块生成时间等等. 最典型的是以太币, 它优化了智能合约, 创建了一个图灵完备的脚本系统, 大大拓展了智能合约的使用场景. </p>
<h4 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h4><p>区块链技术不是什么新兴的技术, 只是原有技术的优化组合. 但它构成了一个自驱动, 自发展, 安全自治的生态系统, 为现有的价值体系提供了新的思路. 相信一定会有更好的发展. </p>
<p>不过当今概念炒作盛行, 很多人在还没有理解的情况下, 看到有利可图就一窝蜂涌入实在不可取. 希望有更多的人能理解区块链, 用好区块链, 发展区块链, 而不是炒作区块链. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;10分钟带你认识区块链&quot;&gt;&lt;a href=&quot;#10分钟带你认识区块链&quot; class=&quot;headerlink&quot; title=&quot;10分钟带你认识区块链&quot;&gt;&lt;/a&gt;10分钟带你认识区块链&lt;/h1&gt;&lt;p&gt;刚接触区块链这个概念的时候, 相信很多人都会有跟我一样的疑问: 区块
    
    </summary>
    
      <category term="技术研究" scheme="http://mapeiyu.com/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>跨进程通信工具Messenger</title>
    <link href="http://mapeiyu.com/2017/09/14/Messenger/"/>
    <id>http://mapeiyu.com/2017/09/14/Messenger/</id>
    <published>2017-09-14T13:31:18.000Z</published>
    <updated>2018-06-07T03:36:02.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨进程通信工具Messenger"><a href="#跨进程通信工具Messenger" class="headerlink" title="跨进程通信工具Messenger"></a>跨进程通信工具Messenger</h1><p>版本更新见 <a href="LOG.md">历史版本</a></p>
<h2 id="工具说明"><a href="#工具说明" class="headerlink" title="工具说明"></a>工具说明</h2><p>MMessenger是一个跨进程通信工具， 与系统提供的Messenger不同。 MM可以拓展了功能， 支持同步， 异步， 注册操作等等。彻底封装实现逻辑， 为使用者提供了方便了拓展和便利的接口使用。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &quot;com.mapeiyu.messenger:messenger:1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>工具分为两部分， Server端功能支持与Client端功能支持。下面我们分两步来讲解。</p>
<h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><p>Server端是用来提供服务为外部使用的， 我们提供了便利的接口来方便Server端的功能拓展。</p>
<p>在Application中添加处理器BaseSVHandler, 其中定义handlerName方便三方找到此方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">MServer.addHandler(&quot;Plus&quot;, new BaseSVHandler() &#123;</div><div class="line">    @Override</div><div class="line">    public Bundle onRequestSync(Bundle request, ICallback callback) &#123;</div><div class="line">        int a = request.getInt(&quot;A&quot;);</div><div class="line">        int b = request.getInt(&quot;B&quot;);</div><div class="line"></div><div class="line">        Bundle result = new Bundle();</div><div class="line">        result.putInt(&quot;RESULT&quot;, a + b);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onRequestAsync(final Bundle request, final @NonNull ICallback callback) &#123;</div><div class="line">        //模拟耗时操作</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int a = request.getInt(&quot;A&quot;);</div><div class="line">        int b = request.getInt(&quot;B&quot;);</div><div class="line"></div><div class="line">        Bundle result = new Bundle();</div><div class="line">        result.putInt(&quot;RESULT&quot;, a + b);</div><div class="line">        try &#123;</div><div class="line">            callback.postResult(result);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中 <code>onRequestSync</code>为同步接口， 可以使Client端直接获得返回结果。<code>onRequestAsync</code>为异步接口， 在异步线程中执行，操作结果通过回调的形式返回</p>
<p>这样设置后， 接入方就拥有了， 提供给外部Client使用的能力。</p>
<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p>Client是服务的使用方， 在使用服务时， 有下面几个步骤。</p>
<ol>
<li>连接服务</li>
</ol>
<ul>
<li>异步操作方式， 可用在所有场景<br><code>MClient.connect(context: Context, target: String, connectCallback: IConnectCallback)</code></li>
</ul>
<p>其中target为目标server的包名.</p>
<ol>
<li>请求结果</li>
</ol>
<p>请求结果也存在同步，异步两种方式， 与上面Server端的两种实现相对应.一个完整的Client端实现是这样的。注意Client端与Server端一定是对应的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">MClient.connect(this, &quot;com.meizu.launcher&quot;, new ConnectCallback() &#123;</div><div class="line">    @Override</div><div class="line">    public void onConnected(@NonNull MBridge bridge) &#123;</div><div class="line">        Bundle request = new Bundle();</div><div class="line">        request.putInt(&quot;A&quot;, 1);</div><div class="line">        request.putInt(&quot;B&quot;, 2);</div><div class="line">        try &#123;</div><div class="line">            //同步请求的例子</div><div class="line">            Bundle result = bridge.requestSync(&quot;Plus&quot;, request);</div><div class="line">            Log.e(&quot;result&quot;, result.getString(&quot;RESULT&quot;) + &quot;=&quot;);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            //异步请求的例子</div><div class="line">            bridge.requestAsync(&quot;Plus&quot;, request, new ResultCallback() &#123;</div><div class="line">                @Override</div><div class="line">                public void onResult(Bundle result) throws RemoteException &#123;</div><div class="line">                    Log.e(&quot;result&quot;, result.getString(&quot;RESULT&quot;) + &quot;=&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跨进程通信工具Messenger&quot;&gt;&lt;a href=&quot;#跨进程通信工具Messenger&quot; class=&quot;headerlink&quot; title=&quot;跨进程通信工具Messenger&quot;&gt;&lt;/a&gt;跨进程通信工具Messenger&lt;/h1&gt;&lt;p&gt;版本更新见 &lt;a href=
    
    </summary>
    
      <category term="原创组件" scheme="http://mapeiyu.com/categories/%E5%8E%9F%E5%88%9B%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="kotlin" scheme="http://mapeiyu.com/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>移动端网络优化方向</title>
    <link href="http://mapeiyu.com/2017/08/17/network-opt/"/>
    <id>http://mapeiyu.com/2017/08/17/network-opt/</id>
    <published>2017-08-17T01:35:46.000Z</published>
    <updated>2018-06-07T03:36:02.852Z</updated>
    
    <content type="html"><![CDATA[<p>﻿一个网络请求可以简单分为连接服务器 -&gt; 获取数据两个部分。</p>
<h2 id="一-连接服务器优化"><a href="#一-连接服务器优化" class="headerlink" title="一. 连接服务器优化"></a>一. 连接服务器优化</h2><ul>
<li>不用域名，用 IP 直连（gslb）<br>省去首次域名解析一般需要几百毫秒， 预防域名劫持带来的风险</li>
<li>服务器部署<br>动态 IP选择最优的服务器IP进行连接， 服务器端还可以调优服务器的 TCP 拥塞窗口大小、重传超时时间(RTO)、最大传输单元(MTU)</li>
</ul>
<h2 id="二-获取数据优化"><a href="#二-获取数据优化" class="headerlink" title="二. 获取数据优化"></a>二. 获取数据优化</h2><ul>
<li>连接复用(三次握手方面)<br>节省连接建立时间，如开启 keep-alive</li>
<li>合并请求</li>
<li>减小请求数据大小<br>post请求的body用gzip压缩， 请求头压缩， </li>
<li>CDN缓存</li>
<li>减小返回数据大小<br>api数据gzip压缩， 数据格式json, protobuf, 多个图片分变率， webp格式， 增量更新， 断点续传</li>
</ul>
<h2 id="三-其它优化"><a href="#三-其它优化" class="headerlink" title="三. 其它优化"></a>三. 其它优化</h2><ul>
<li>预加载</li>
<li>延迟加载</li>
<li>并发请求</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;﻿一个网络请求可以简单分为连接服务器 -&amp;gt; 获取数据两个部分。&lt;/p&gt;
&lt;h2 id=&quot;一-连接服务器优化&quot;&gt;&lt;a href=&quot;#一-连接服务器优化&quot; class=&quot;headerlink&quot; title=&quot;一. 连接服务器优化&quot;&gt;&lt;/a&gt;一. 连接服务器优化&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="优化" scheme="http://mapeiyu.com/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="网络" scheme="http://mapeiyu.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据库基本概念</title>
    <link href="http://mapeiyu.com/2017/08/15/Basic-concept-of-database/"/>
    <id>http://mapeiyu.com/2017/08/15/Basic-concept-of-database/</id>
    <published>2017-08-15T02:08:44.000Z</published>
    <updated>2018-06-07T03:36:02.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li>数据库（DB）：长期存储在计算机内、有组织的、统一管理的相关数据的集合。</li>
<li>数据库管理系统（DBMS）：位于用户和操作系统之间的一层数据管理软件。</li>
<li>数据库系统（DBS）：实现有组织地、动态地存储大量关联数据、方便多用户访问的计算机硬件、软件和数据资源组成的系统</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>关系数据库.</li>
<li>分布式数据库. 通常使用位于不同的地点的较小的计算机系统，通过网络连接构成完整的、全局的大型数据库。每台计算机有DBMS的一份完整拷贝，且具有自己局部的数据库。</li>
<li>对象数据库. 是用以对象形式表示信息的数据库。对象数据库的管理系统称为ODBMS或OODBMS。</li>
<li>网络数据库. 由数据和资源共享这两种方式结合在一起而成，也称Web数据库。它以后台（远程）数据库为基础，加上一定的前台（本地计算机）程序，通过浏览器完成数据的存储、查询等操作</li>
</ul>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><ul>
<li>概念模式. 简称为模式，它表示了对数据的全局逻辑级的抽象级别，是数据库中全部数据的整体逻辑结构的描述。它由若干个概念记录类型组成，还包含记录间联系、数据的完整性、安全性等要求。在实现中，它可以对应于所有的表格。</li>
<li>内模式. 也称存储模式，表示了对数据的物理级的抽象级别。它是数据库中全体数据的内部表示或底层描述，是数据库最低一级的逻辑描述，它描述了数据在存储介质上的存储方式和物理结构，对应着实际存储在外存储介质上的数据库。它包括记录类型、索引、文件的组织等，用内模式描述语言来描述、定义。</li>
<li>外模式也称子模式，表示了对数据的局部逻辑级的抽象级别。它对应于用户级，是用户与数据库系统的接口，是用户用到的那部分数据的描述。在实现中可以对应于视图。</li>
</ul>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><h3 id="概念数据模型-ER模型"><a href="#概念数据模型-ER模型" class="headerlink" title="概念数据模型-ER模型"></a>概念数据模型-ER模型</h3><ul>
<li>实体：客观存在，可以互相区别的事物。</li>
<li>属性：实体的特性</li>
<li>联系：实体之间的相互联系</li>
</ul>
<h3 id="逻辑数据模型"><a href="#逻辑数据模型" class="headerlink" title="逻辑数据模型"></a>逻辑数据模型</h3><ul>
<li>层次模型：用树形结构表示实体类型及实体间联系的数据模型，盛行于20世纪70年代。缺点是只能表示1:N的关系，且查询和操作很复杂。</li>
<li>网状模型：用有向图表示实体类型及实体间联系的数据模型，盛行于70年代至80年代中期。它的特点是记录之间联系通过指针实现，M:N也容易实现，查询效率较高。缺点是数据结构复杂，编程复杂。</li>
<li>关系模型：用二维表格表示实体集；用关键码而不是用指针导航数据。SQL语言是具有代表性的语言</li>
</ul>
<h3 id="物理数据模型"><a href="#物理数据模型" class="headerlink" title="物理数据模型"></a>物理数据模型</h3><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><h3 id="完整性规则"><a href="#完整性规则" class="headerlink" title="完整性规则"></a>完整性规则</h3><ul>
<li>实体完整性规则，即主键的值不能是空值；</li>
<li>参照完整性规则，即不允许（通过外键）引用不存在的实体；</li>
<li>用户定义的完整性规则，比如属性“性别”只能接受“男”和“女”作为合法值，其它的输入都是非法的</li>
</ul>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><ul>
<li>五个基本操作：并（Union，∪）、差（set difference，−）、笛卡儿积（Cartesian product，×）、投影（Projection，Π）和选择（Selection，σ）；</li>
<li>四个组合操作：交（Intersection，∩）、θ连接（θ-Join，θ）、自然连接（Natural join，⋈）和除法（Division，÷）；</li>
<li>七个扩充操作：改名（Rename，ρ）、广义投影、赋值（←）、外连接（Outer joins，⟕⟖⟗）、外部并、半连接（Semijoin，⋉ ⋊）、聚集操作（Aggregation）。</li>
</ul>
<h2 id="规范化理论"><a href="#规范化理论" class="headerlink" title="规范化理论"></a>规范化理论</h2><ul>
<li>一范式. 无重复的列</li>
<li>二范式. 属性完全依赖于主键</li>
<li>三范式. 属性不依赖于其它非主属性</li>
<li>四范式. 禁止主键列和非主键列一对多关系不受约束</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务的基本属性</p>
<ul>
<li>原子性（Atomicity）：一个事务对数据库的所有操作，是一个不可分割的工作单元。这些操作要么全部执行，要么什么也不做。</li>
<li>一致性（Consistency）：一个事务独立执行的结果，应保持数据库的一致性，即数据不会因事务的执行而遭到破坏。</li>
<li>隔离性（Isolation）：在多个事务并发执行时，系统应保证与这些事务先后独立执行的结果一样。</li>
<li>持久性（Durability）：一个事务一旦完成全部操作后，他对数据库的所有更新应永久地反映在数据库中</li>
</ul>
<p>这些属性的首字母缩写为ACID。其中原子性是最主要的根本目标；其它三个是辅助的属性。</p>
<h2 id="索引机制"><a href="#索引机制" class="headerlink" title="索引机制"></a>索引机制</h2><p>索引用来提高数据查找的效率，用户看不到索引的存在。注意：使用索引会使更新表的速度变慢，因为数据更新的同时还要更新索引。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>第二，可以大大加快数据的检索速度，这也是创建索引的最主要的原因。<br>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>第四，在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>第一，创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br>第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。<br>第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度</p>
<h3 id="什么情况下用"><a href="#什么情况下用" class="headerlink" title="什么情况下用"></a>什么情况下用</h3><ul>
<li>经常搜索</li>
<li>主键， 外键 </li>
<li>需要排序或限定范围的列</li>
</ul>
<h3 id="什么情况下不用"><a href="#什么情况下不用" class="headerlink" title="什么情况下不用"></a>什么情况下不用</h3><ul>
<li>查询少， </li>
<li>数据少</li>
<li>数据量大的列(text, img, bit)</li>
<li>修改性能&gt;&gt;检索性能</li>
</ul>
<h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ul>
<li>唯一索引。 限定列不重复</li>
<li>主键索引。 主键会自动创建</li>
<li>聚集索引。 一个表只能有一个。 物理顺序与逻辑顺序相同。</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul>
<li>B树</li>
<li>B+树</li>
<li>红黑树（索引不用）</li>
</ul>
<h2 id="视图机制"><a href="#视图机制" class="headerlink" title="视图机制"></a>视图机制</h2><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易</p>
<p>用来对无权用户屏蔽数据。数据安全，逻辑数据独立性和操作简便性。</p>
<p><a href="http://blog.csdn.net/kennyrose/article/details/7532032/" target="_blank" rel="external">http://blog.csdn.net/kennyrose/article/details/7532032/</a><br><a href="http://www.cnblogs.com/anding/p/3254674.html" target="_blank" rel="external">http://www.cnblogs.com/anding/p/3254674.html</a><br><a href="http://blog.csdn.net/u011404663/article/details/45252899" target="_blank" rel="external">http://blog.csdn.net/u011404663/article/details/45252899</a><br><a href="http://blog.csdn.net/hectorhua/article/details/13767361/" target="_blank" rel="external">http://blog.csdn.net/hectorhua/article/details/13767361/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库基础&quot;&gt;&lt;a href=&quot;#数据库基础&quot; class=&quot;headerlink&quot; title=&quot;数据库基础&quot;&gt;&lt;/a&gt;数据库基础&lt;/h2&gt;&lt;h3 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术
    
    </summary>
    
      <category term="基础复习" scheme="http://mapeiyu.com/categories/%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="database" scheme="http://mapeiyu.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>proguard点滴</title>
    <link href="http://mapeiyu.com/2017/06/06/progard-in-aar/"/>
    <id>http://mapeiyu.com/2017/06/06/progard-in-aar/</id>
    <published>2017-06-06T13:29:20.000Z</published>
    <updated>2018-06-07T03:36:02.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于混淆"><a href="#关于混淆" class="headerlink" title="关于混淆"></a>关于混淆</h2><p>proguard不止能混淆, 还会做代码裁剪, 方法内联等等优化, 一般在Android工程里, 我们用的最多的是裁剪(shrink), 优化(optimize)和混淆(obfuscate), 其中代码裁剪, 特别是对方法的裁剪, 是降低dex方法数的一条捷径. 在日常使用中, 我们把proguard的裁剪, 优化, 混淆等一系列步骤笼统的称为混淆</p>
<ol>
<li>shrink裁剪. 会将一些无效代码给移除，即没有被显式调用的代码</li>
<li>optimize优化. 基于控制流、数据流分析后，删除、合并一些代码. 如给类加final, 内联方法， 合并方法等。。</li>
<li>obfuscate混淆. 混淆类名、属性名、方法名、变量名等，变成无意义的类似a,b,c,d…的名字</li>
</ol>
<h2 id="第三方SDK的混淆"><a href="#第三方SDK的混淆" class="headerlink" title="第三方SDK的混淆:"></a>第三方SDK的混淆:</h2><ol>
<li>SDK必须keep的部分, 如使用了反射等技术时需要做对应的keep</li>
<li>对公开API的keep, 这部分如果不keep, SDK接入方根本没法用. 但是SDK接入方并不可能使用到SDK里所有的公开API</li>
</ol>
<h2 id="科学做法"><a href="#科学做法" class="headerlink" title="科学做法"></a>科学做法</h2><h3 id="提取共性"><a href="#提取共性" class="headerlink" title="提取共性"></a>提取共性</h3><p>activity类名必须keep</p>
<pre><code>-keep public class * extends android.app.Activity 
</code></pre><p>JNI方法必须keep</p>
<pre><code>-keepclasseswithmembers,includedescriptorclasses class * {
    native &lt;methods&gt;;
}
</code></pre><p>其中 includedescriptorclasses, 加上它就能保证方法参数的类型不被混淆</p>
<p>keep住所有会在xml中使用的控件</p>
<pre><code>-keepclasseswithmembers class * { 
    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);
}
</code></pre><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>定义注解</p>
<pre><code>@Retention(RetentionPolicy.CLASS)
@Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.FIELD})
public @interface Keep { }
</code></pre><p>proguard文件中定义规则</p>
<pre><code>-keep,allowobfuscation @interface com.shaw.Keep
-keep @com.shaw.Keep class * {
    *;
}
-keepclasseswithmembers class * {
    @com.shaw.Keep &lt;fields&gt;;
}
-keepclasseswithmembers class * {
    @com.shaw.Keep &lt;init&gt;(...);
}
-keepclasseswithmembers class * {
    @com.shaw.Keep &lt;methods&gt;;
}
</code></pre><h3 id="使用aar"><a href="#使用aar" class="headerlink" title="使用aar"></a>使用aar</h3><p>consumerProguardFiles  是aar的接入方在构建时会使用的混淆规则<br>proguardFiles  是用于构建aar的混淆规则</p>
<p>注：consumerProguardFiles这个属性只能在com.android.library即aar工程中使用。 这个很好理解。 但是consumerProguardFiles的规则是合并到调用方的proguard中一起在编译中生效的。 所以如果一个aar包中使用了</p>
<pre><code>-keep class com.** { *; }
</code></pre><p>那SDK接入方com包下的一切都没法混淆了.</p>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="proguard时机"><a href="#proguard时机" class="headerlink" title="proguard时机"></a>proguard时机</h3><center><img src="/2017/06/06/progard-in-aar/java-task.png" alt="编译流程"></center>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://blog.csdn.net/jjwwmlp456/article/details/44977721" target="_blank" rel="external">http://blog.csdn.net/jjwwmlp456/article/details/44977721</a></li>
<li><a href="http://www.jianshu.com/p/14af4a474d55" target="_blank" rel="external">http://www.jianshu.com/p/14af4a474d55</a></li>
<li><a href="https://www.guardsquare.com/en/proguard/manual/usage" target="_blank" rel="external">https://www.guardsquare.com/en/proguard/manual/usage</a></li>
</ul>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><ul>
<li>访问我的个人博客 <a href="http://www.mapeiyu.com" target="_blank" rel="external">马培羽</a></li>
<li>邮件 <a href="mason.mpy@gmail.com">mason.mpy@gmail.com</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于混淆&quot;&gt;&lt;a href=&quot;#关于混淆&quot; class=&quot;headerlink&quot; title=&quot;关于混淆&quot;&gt;&lt;/a&gt;关于混淆&lt;/h2&gt;&lt;p&gt;proguard不止能混淆, 还会做代码裁剪, 方法内联等等优化, 一般在Android工程里, 我们用的最多的是裁剪(sh
    
    </summary>
    
      <category term="方案" scheme="http://mapeiyu.com/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="proguard" scheme="http://mapeiyu.com/tags/proguard/"/>
    
  </entry>
  
  <entry>
    <title>如何通过注解添加逻辑</title>
    <link href="http://mapeiyu.com/2017/03/22/add-logic-through-annotation/"/>
    <id>http://mapeiyu.com/2017/03/22/add-logic-through-annotation/</id>
    <published>2017-03-22T03:00:03.000Z</published>
    <updated>2018-06-07T03:36:02.848Z</updated>
    
    <content type="html"><![CDATA[<h4 id="做什么？？"><a href="#做什么？？" class="headerlink" title="做什么？？"></a>做什么？？</h4><p>近期在为公司的项目做埋点。 因为之前做过几次， 深知这个东西的麻烦， 要频繁的往代码中添加重复逻辑。什么onStart, onStop全部都重写一遍， 做为一个码农，咱怎么也算是脑力劳动者， 什么时候变成干体力活了。研究了两天，绕了一个大弯， 终于找到了方法。记录一下这个过程。</p>
<h4 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h4><p>第一感觉是不是这个东西要用到编译时注解， 因为咱的目的是在编译时添加逻辑嘛。哼哧，哼哧。。。。<br>    <a href="http://www.open-open.com/lib/view/open1470735314518.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1470735314518.html</a></p>
<h4 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h4><p>添加逻辑就是要自己构造代码喽。一般都是用方块的javapoet. 继续哼哧，哼哧。。。。<br>    <a href="http://www.jianshu.com/p/95f12f72f69a" target="_blank" rel="external">http://www.jianshu.com/p/95f12f72f69a</a><br>    <a href="https://github.com/square/javapoet" target="_blank" rel="external">https://github.com/square/javapoet</a> </p>
<h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件?"></a>修改文件?</h4><p>哦。不对javapoet只能用来生成新的java文件。 不能用来修改class文件， 我们的目的是要修改生成的class文件啊。</p>
<h4 id="nuwa怎么做到的"><a href="#nuwa怎么做到的" class="headerlink" title="nuwa怎么做到的"></a>nuwa怎么做到的</h4><p>记得之前热更新插件中可以修改class文件的， nuwa就是通过修改class文件来达到使类具有热修复能力的。 继续哼哧，哼哧。。。。<br>    <a href="https://github.com/jasonross/Nuwa" target="_blank" rel="external">https://github.com/jasonross/Nuwa</a></p>
<h4 id="asm字节码"><a href="#asm字节码" class="headerlink" title="asm字节码"></a>asm字节码</h4><p>原来用的asm字节码工具啊。 继续哼哧， 哼哧。。。。<br>    <a href="https://www.ibm.com/developerworks/cn/java/j-lo-asm30/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-asm30/</a><br>    <a href="http://asm.ow2.org/" target="_blank" rel="external">http://asm.ow2.org/</a></p>
<h4 id="此路不通"><a href="#此路不通" class="headerlink" title="此路不通"></a>此路不通</h4><p>发现问题了啊。注解处理器无法处理修改类。同时注解处理器的处理时机是在编译之前， 即这里还没有生成class文件。 完蛋， 此路不通啊。。。。</p>
<h4 id="gradle的task"><a href="#gradle的task" class="headerlink" title="gradle的task"></a>gradle的task</h4><p>即然注解处理器的处理时机不对，不如我们自己来控制处理时机喽。在gradle的编译task上下文章。在java的compileJava task后面， 或者在 android的compileXXXSources task后面执行 asm的字节码处理。 看下面两个图:</p>
<center><img src="/2017/03/22/add-logic-through-annotation/java-task.png" alt="java">  <img src="/2017/03/22/add-logic-through-annotation/android-task.png" alt="android"></center>

<h4 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h4><p>但是这个效率太低了啊。 不像注解处理器一样， asm无法专门找到和处理某个annotation. 难倒要让asm扫描所有的类文件， 找到指定的annotation?? </p>
<h4 id="注解处理器与gradle相结合"><a href="#注解处理器与gradle相结合" class="headerlink" title="注解处理器与gradle相结合"></a>注解处理器与gradle相结合</h4><p>只能想方法喽。 把注解处理器和gradle编译结合起来。先通过注解处理器把包含注解的类过滤出来， 然后在gradle的编译task后使用asm处理过滤出来的类。 </p>
<h4 id="找找别的办法"><a href="#找找别的办法" class="headerlink" title="找找别的办法"></a>找找别的办法</h4><p>貌似逻辑上可以走通哦，但总是感觉有那么一点点别扭。找找有没有别的办法。国内毛都查不到， 还是老外见多识广。<br>    <a href="http://stackoverflow.com/questions/4851429/modify-a-method-using-annotations" target="_blank" rel="external">http://stackoverflow.com/questions/4851429/modify-a-method-using-annotations</a></p>
<h4 id="大牛回复"><a href="#大牛回复" class="headerlink" title="大牛回复"></a>大牛回复</h4><p>他跟我要实现的效果差不多。初始想法好像也是跟我差不多， 想用annotation processor来处理。 但是被第一个回复的大牛能否决了啊。 大牛还摘了一段wiki的原话， 意思是不能修改原annotation标注的类云云。但是我找了一下， 可能是版本升级吧。 大牛最关键的<code>but annotation processors cannot modify the annotated code itself.</code> 一句， 已被wike改成了<code>and also modify the annotated code itself</code>。 好像还是可以改， 所以回到第6步， 看来还是能用 annotation processor. 但在编译前的注解处理器，估计只能改java原文件吧。 class还没有编译出来啊。这不是我想要的。 </p>
<h4 id="hugo怎么做的"><a href="#hugo怎么做的" class="headerlink" title="hugo怎么做的"></a>hugo怎么做的</h4><p>再想想办法. 记得之前用过大神jake walton的log神器hugo. 可以通过一注解来打印函数的变量， 执行时间等等。 显然这只能是通过注解把逻辑注入到了函数中实现的。<br>    <a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a></p>
<h4 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h4><p>对于实现原理， 只能拿来了。 果然他用了另一种切面语言 AspectJ注入的逻辑。最初上面的老外那个问题， 大牛也提出了使用<code>AspectJ Development Tools</code>的解决方案。同时还不依不饶的让楼主使用。 我最初没在意， 以为就是一个eclipse的源码处理插件。通过ide的编译器做到的识别annotation插件代码， 类似搜索替换. 但通过hugo的使用， 看来是通用的。<br>    <a href="http://blog.csdn.net/xxxzhi/article/details/53048476" target="_blank" rel="external">http://blog.csdn.net/xxxzhi/article/details/53048476</a><br>    <a href="http://blog.csdn.net/hp910315/article/details/52701809" target="_blank" rel="external">http://blog.csdn.net/hp910315/article/details/52701809</a></p>
<h4 id="方案确定"><a href="#方案确定" class="headerlink" title="方案确定"></a>方案确定</h4><p>在此， 确定了方案为使用 aspectJ来实现通过注解添加逻辑。一切参照hugo的代码实现即可。 我的简易实现代码.<br>    <a href="https://github.com/masonTool/AspectJDemo" target="_blank" rel="external">https://github.com/masonTool/AspectJDemo</a></p>
<h4 id="AspectJ粗浅的理解"><a href="#AspectJ粗浅的理解" class="headerlink" title="AspectJ粗浅的理解"></a>AspectJ粗浅的理解</h4><p>对于AspectJ， 这里记录一个粗浅的理解。</p>
<ol>
<li>AspectJ可以理解为java的拓展。因为他是兼容java的。 </li>
<li>AspectJ编译时使用自己的编译器ajc</li>
<li>是一种面向切面的语言。 切面与模块是相对应的。如果把面向对象形容为纵向， 则切面可以理解为横向。特别适合做log, 权限管理，埋点， 等等。将逻辑切入对象，同时又不破坏对象的逻辑独立性和耦合性。</li>
<li>一个最关键的概念就是Join Points. 翻译为”切入点”. 在Java中他定义了很多切入点，比如函数调用前， 函数执行前，函数执行后， 变量get时， 变量set时。。。总之发挥你的想象，基本上你想切入的点他都定义了。</li>
<li>怎么做到切入某个点呢？很自然， 首先筛选出想要切入的点(pointcut)， 然后处理筛选出来的点的逻辑(advice). 就是这样了。然后使用ajc去编译就可以了。</li>
<li>注意：如果你想在jar包中或者aar中使用aspectJ,不只需要使用ajc去编译生成包， 同时引用者也要使用ajc去编译才行。</li>
</ol>
<p>如果不想啃官方文档  <a href="https://eclipse.org/aspectj/docs.php" target="_blank" rel="external">https://eclipse.org/aspectj/docs.php</a><br>这篇文章可以带你入门  <a href="http://blog.csdn.net/innost/article/details/49387395" target="_blank" rel="external">http://blog.csdn.net/innost/article/details/49387395</a></p>
<h4 id="一点改进"><a href="#一点改进" class="headerlink" title="一点改进"></a>一点改进</h4><p>要想使用AspectJ不只需要引用<code>org.aspectj:aspectjrt:1.8.6</code>就完事了, 这个包只是让你编写代码用的，还需要自己处理编译逻辑。个人认为这个地方可以做得更简易一些， 就像groovy插件的自动编译一样。 </p>
<p>所以我这里写了一个简易的gradle插件，copy到你的工程apply一下，就可以任性的编写aspectj代码，同时你也不用理会编译的事情了。<br><a href="https://github.com/masonTool/AspectJDemo/blob/master/aspect_compile.gradle" target="_blank" rel="external">https://github.com/masonTool/AspectJDemo/blob/master/aspect_compile.gradle</a></p>
<p>你可以直接使用，或者只做很小的改动来使用.当然这还只一个demo版本，但如果你是像我一样的新手，同时又不需要过多的高级配置的话，这已经足够好了.有时间我会把他以gradleplugin的形式发布到jcenter，让新手可以更方便的使用。</p>
<center><img src="/2017/03/22/add-logic-through-annotation/qc.jpg" alt="tt"></center>


]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;做什么？？&quot;&gt;&lt;a href=&quot;#做什么？？&quot; class=&quot;headerlink&quot; title=&quot;做什么？？&quot;&gt;&lt;/a&gt;做什么？？&lt;/h4&gt;&lt;p&gt;近期在为公司的项目做埋点。 因为之前做过几次， 深知这个东西的麻烦， 要频繁的往代码中添加重复逻辑。什么onStar
    
    </summary>
    
      <category term="方案" scheme="http://mapeiyu.com/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="java" scheme="http://mapeiyu.com/tags/java/"/>
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="annotation" scheme="http://mapeiyu.com/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Android自动化测试入门篇</title>
    <link href="http://mapeiyu.com/2017/03/02/start-android-test/"/>
    <id>http://mapeiyu.com/2017/03/02/start-android-test/</id>
    <published>2017-03-02T07:40:01.000Z</published>
    <updated>2018-06-07T03:36:02.848Z</updated>
    
    <content type="html"><![CDATA[<p>Android的测试是基于<a href="http://junit.org/" target="_blank" rel="external">JUnit</a>的。 你可以基于JVM进行本地的单元测试(Local unit tests)， 也可以基于Android设备进行设备化的测试(instrumented tests)。 本文对构建Android测试的概念和工具， 进行一些简要的介绍.</p>
<h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><p>对于你的项目中的任何一个模块，Android Studio提供了两个测试代码的目录。 你的测试代码必须写在这两个目录之中。这个两个目录就对应了相应的两个测试方法。 </p>
<ul>
<li><p>本地单元测试(Local unit tests)</p>
<p>  目录位于 <code>module-name/src/test/java/.</code></p>
<p>  这些测试代码运行于本地JVM, 并且不会调用任何的Android框架的API. </p>
<p>  如果你想了解详情， 请参阅<a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests.html" target="_blank" rel="external">构建本地单元测试</a></p>
</li>
<li><p>设备化测试(instrumented tests)</p>
<p>  目录位于 <code>module-name/src/androidTest/java/.</code></p>
<p>  这些测试代码必须运行在Android硬件设备或者虚拟机上。</p>
<p>  设备化测试在测试app时， 会同时构建一个测试APK运行在设备上。系统会把测试APK与app运行在同一个进程下， 所以测试代码中可以调用app的方法, 修改app的变量, 并且自动执行你的app的各种交互.</p>
<p>  相要了解如何创建设备化测试， 请关注下面的主题：</p>
<ul>
<li><p><a href="https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html" target="_blank" rel="external">构建设备化单元测试</a> : 构建存在Android系统依赖的复杂单元测试案例（在模拟对象无法满足的情况下）。</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/ui-testing/index.html" target="_blank" rel="external">自动化界面测试</a>: 构建测试案例验证用户界面行为的正确性（单应用的交互或者跨多应用的交互）。</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/integration-testing/index.html" target="_blank" rel="external">测试App组件</a>: 验证组件的行为， 比如 Service 或 Content Provider等用户不能直接交互的组件。</p>
<center><img src="/2017/03/02/start-android-test/test-types_2x.png" alt="tt"></center>

</li>
</ul>
</li>
</ul>
<p>然而, 本地单元测试和设备化测试仅仅是术语, 用来帮助区分是在本地JVM上运行还是在Android平台上运行的(硬件设备或模拟器)。在构建一个完整的测试案例时，你应该通过下面表中的描述来理解真正的测试类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>子类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元测试(Unit tests)</td>
<td>本地单元测试(Local Unit Tests)</td>
<td>运行于本地虚拟机(JVM)的单元测试. 当你的测试有没有Android框架依赖或者这些依赖可以模拟时， 使用这种测试可以使执行时间最少化.</td>
</tr>
<tr>
<td></td>
<td>设备化单元测试(Instrumented unit tests)</td>
<td>运行于Android设备或虚拟机的单元测试. 这种类型的测试可以获得<a href="https://developer.android.com/reference/android/app/Instrumentation.html" target="_blank" rel="external">Instrumentation</a>信息， 比如你正在测试的app的上下文信息 <a href="https://developer.android.com/reference/android/content/Context.html" target="_blank" rel="external">Context</a>. 当你的测试有不能被模拟的Android框架依赖时，使用这种测试。</td>
</tr>
<tr>
<td>集成测试(Integration Tests)</td>
<td>应用内组件测试(Components within your app only)</td>
<td>在交互中当用户执行一个特定的行为，或者键入一个特定的输入， 这种类型的测试可以验证目录app的行为是否符合预期。比如说， 当用户在应用的Activity界面中进行交互时，它可以让你检查目标app的界面响应是否正确。像<a href="https://developer.android.com/tools/testing-support-library/index.html#Espresso" target="_blank" rel="external">Espresso</a>这种UI测试框架, 可以让你用编程的方式去模拟用户的行为，和检测应用内部复杂的交互逻辑.</td>
</tr>
<tr>
<td></td>
<td>跨应用组件测试(Cross-app Components)</td>
<td>这种类型的测试， 可以验证不同的用户app间，用户app与系统app间的交互行为的正确性。比如说， 你可以验证当用户点击Android系统设置按钮时，你的app的行为是否正确。支持跨应用的交互框架，比如<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#UIAutomator" target="_blank" rel="external">UI Automator</a>允许你在这种场景下创建测试。</td>
</tr>
</tbody>
</table>
<h2 id="测试的API"><a href="#测试的API" class="headerlink" title="测试的API"></a>测试的API</h2><p>以下为测试Android应用常用的api</p>
<h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><p>你可以像写 <a href="http://junit.org/" target="_blank" rel="external">JUnit4</a>测试类一样写你的单元测试和集成测试。JUnit框架提供了一种便捷的方式在你的测试中进行安装， 卸载， 和断言操作。</p>
<p>一个基本的Junit4测试类是一个拥用一个或者多个测试方法的Java类。一个测试方法由<code>@Test</code>注解开始， 并且包含一段可以运行和验证单一功能的代码。</p>
<p>下面的代码片段展示了一个JUnit 4集成测试的例子， 例子中使用<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#Espresso" target="_blank" rel="external">Espresso APIs</a> 在一个UI元素上执行点击操作， 然后检查是否有一个预期的字符串展示。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RunWith(AndroidJUnit4.class)</div><div class="line">@LargeTest</div><div class="line">public class MainActivityInstrumentationTest &#123;</div><div class="line"></div><div class="line">    @Rule</div><div class="line">    public ActivityTestRule mActivityRule = new ActivityTestRule&lt;&gt;(</div><div class="line">            MainActivity.class);</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void sayHello()&#123;</div><div class="line">        onView(withText(&quot;Say hello!&quot;)).perform(click());</div><div class="line"></div><div class="line">        onView(withId(R.id.textView)).check(matches(withText(&quot;Hello, World!&quot;)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在你的JUnit4测试类中， 你可以在你的测试代码中使用下面的注解调用特定处理的一部分。</p>
<ul>
<li><p>@Before: 使用这个注解可以指定一段包含测试设置操作的代码。测试类在每个测试执行前调用这段代码。你可以定义多个带有@Before注解的方法， 但是在测试类中这个方法执行的顺序是不确的。</p>
</li>
<li><p>@After: 这个注解指定一段代码包含测试卸载操作。在每个测试方法执行后调用这段代码。你可以定义多个@After操作的代码。使用这个注解来释放内存中的资源。</p>
</li>
<li><p>@Test: 使用这个注解标识一个测试方法。 一个单独的测试类可以有多个测试方法</p>
</li>
<li><p>@Rule: @Rule通过复用的方法，可以允许你可以灵活的添加和修改每个测试方法。 在Android测试中， 此注解需要和Android测试支持库中提供的测试规则类配合命用。比如 <a href="https://developer.android.com/reference/android/support/test/rule/ActivityTestRule.html" target="_blank" rel="external">ActivityTestRule</a>和 <a href="https://developer.android.com/reference/android/support/test/rule/ServiceTestRule.html" target="_blank" rel="external">ServiceTestRule</a></p>
</li>
<li><p>@BeforeClass: 使用此注解来指定一个测试类的静态方法只能调用一次。这种测试步骤对于耗时操作非常有用， 例如连接数据库操作。</p>
</li>
<li><p>@AfterClass: 使用这个注解来指定一个静态方法， 当类中所有的测试方法都已经运行完成的时候调用。 这个步骤对释放@BeforeClass块中占用的资源非常有用。</p>
</li>
<li><p>@Test(timeout=): 一些注解支持在注解中设置变量值。 例如， 你可以指定一个测试的超时时间，如果一个测试开始并且没有在指定的超时时间内完成， 它自动认为校验失败。超时时间的单位是毫秒， 如 <code>@Test(timeout=5000)</code></p>
</li>
</ul>
<p>想了解更多注解， 可以参阅文档  <a href="http://junit.sourceforge.net/javadoc/org/junit/package-summary.html" target="_blank" rel="external">JUnit annotations</a> 和 <a href="https://developer.android.com/reference/android/support/annotation/package-summary.html" target="_blank" rel="external">Android annotations</a>.</p>
<p>使用JUnit的<a href="https://developer.android.com/reference/junit/framework/Assert.html" target="_blank" rel="external">Assert</a>类来验证一个对象状态的正确性。asset方法比较你的期望值与真实值， 并且当两个值不相符时抛出一个异常。<a href="https://developer.android.com/training/testing/start/index.html#AssertionClasses" target="_blank" rel="external"> Assertion classes</a>对这些方法有详细的描述。</p>
<h3 id="Android的测试支持库"><a href="#Android的测试支持库" class="headerlink" title="Android的测试支持库"></a>Android的测试支持库</h3><p><a href="https://developer.android.com/topic/libraries/testing-support-library/index.html" target="_blank" rel="external">Android的测试支持库</a>提供了一些API的集合，　使你可以快速的创建和运行测试代码，　包括JUnit4和UI测试。当你想自动化测试你的应用时，　下面这些库的基于设备的API会非常的有用。</p>
<ul>
<li><p><a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#AndroidJUnitRunner" target="_blank" rel="external">AndroidJUnitRunner</a>. 一个Android的兼容JUnit4的测试运行器</p>
</li>
<li><p><a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#Espresso" target="_blank" rel="external">Espresso</a>. 一个适用于应用内部ＵＩ功能验证的ＵＩ测试框架。</p>
</li>
<li><p><a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#UIAutomator" target="_blank" rel="external">UI Automator</a>. 一个适用于跨应用的ＵＩ功能测试的ＵＩ测试框架</p>
</li>
</ul>
<h3 id="Assertion-classes"><a href="#Assertion-classes" class="headerlink" title="Assertion classes"></a>Assertion classes</h3><p>因为Android测试支持库的API继承于JUnit, 所以你可以使用assetion方法来展示测试的结果。　一个assertion方法会比较实际的值与预期的值，　并且当结果不符时抛出一个AssertionException异常. 使用assertion可以比loggin的方式更方便，　并且拥有更好的性能。</p>
<p>为了简化测试的开发，　你可以使用<a href="https://github.com/hamcrest" target="_blank" rel="external"> Hamcrest library</a>, 使用Hamcrest matcher APIs可以让你创建更灵活的测试。</p>
<h3 id="Monkey和monkeyrunner"><a href="#Monkey和monkeyrunner" class="headerlink" title="Monkey和monkeyrunner"></a>Monkey和monkeyrunner</h3><p>Android SDK提供两种功能级app测试的工具。</p>
<ul>
<li><p>Monkey </p>
<p>  Monkey是一个命令行工具，　可以向设备发送模拟的随机事件，　比如按钮，　触屏，　手势等。通过<a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">Android Debug Bridge (adb)</a>工具来运行。它可以用来进行压力测试，上报错误，或者多次重复执行一个事件。</p>
</li>
<li><p>monkeyrunner</p>
<p>  这是一个用Python实现的工具，　它拥用测试程序API和执行环境。API的功能包括连接到设备，　安装卸载应用，　截屏，　比较图片，　执行一个app的测试包等。使用它的API，　你可以写出一些强大的复杂的测试。使用命令行工具monkeyrunner, 来运行你的程序。</p>
</li>
</ul>
<h2 id="如何构建测试"><a href="#如何构建测试" class="headerlink" title="如何构建测试"></a>如何构建测试</h2><p>下面的这些文档提供了更详细的信息，教你如何创建和运行各种类型的测试。</p>
<ul>
<li><p><a href="https://developer.android.com/training/testing/unit-testing/local-unit-tests.html" target="_blank" rel="external">构建本地单元测试</a></p>
<p>  构建没有依赖或只有可以模拟的简单依赖的单元测试，　运行于你的本地虚拟机</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests.html" target="_blank" rel="external">构建设备单元测试</a></p>
<p>  构建复杂的依赖Android的复杂单元测试，　运行于硬件设备或者模拟器。</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/ui-testing/index.html" target="_blank" rel="external">自动化界面测试</a></p>
<p>  创建用户界面行为的校验测试，　基于单应用或者跨应用。</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/integration-testing/index.html" target="_blank" rel="external">测试组件集成</a></p>
<p>  测试用户不能直接交互的组件，　比如Service或者Content Provider</p>
</li>
<li><p><a href="https://developer.android.com/training/testing/performance.html" target="_blank" rel="external">测试显示性能</a></p>
<p>  测试你的应用的界面显示性能，　来保证有平滑的用户体验。</p>
</li>
</ul>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>话说翻这东西真是劳心劳力,　四个小时，闲的么？<br>转载请注明来源 <a href="http://www.mapeiyu.com" target="_blank" rel="external">http://www.mapeiyu.com</a></p>
<center><img src="/2017/03/02/start-android-test/jls.jpg" alt="tt"></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android的测试是基于&lt;a href=&quot;http://junit.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JUnit&lt;/a&gt;的。 你可以基于JVM进行本地的单元测试(Local unit tests)， 也可以基于Android设备进行
    
    </summary>
    
      <category term="Android自动化测试" scheme="http://mapeiyu.com/categories/Android%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="test" scheme="http://mapeiyu.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>apk瘦身插件apkeditor新鲜出炉</title>
    <link href="http://mapeiyu.com/2017/02/28/apkeditor/"/>
    <id>http://mapeiyu.com/2017/02/28/apkeditor/</id>
    <published>2017-02-28T08:25:34.000Z</published>
    <updated>2018-06-07T03:36:02.848Z</updated>
    
    <content type="html"><![CDATA[<p>ApkEditor是一个Android应用的Gradle插件. </p>
<p>在Android应用中经常会引用一些lib或者aar，但这些第三方的包不可避免会携带一些冗余的资源, 使你的apk变得很大。本插件可以把这些资源从你的apk中剔除出来， 使你的apk变得尽可能得小。</p>
<p>但是， ApkEditor需要你有能力可以分辨这些资源在运行时不会被用到。否则会造成程序的崩溃。</p>
<h2 id="下载和使用"><a href="#下载和使用" class="headerlink" title="下载和使用"></a>下载和使用</h2><ol>
<li><p>ApkEditor需要检查你的Android应用的运行环境。 所以请保证<code>com.android.application</code>已经被使用。</p>
</li>
<li><p>应用到项目:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.mapeiyu.apkeditor:apkeditor:1.0.3&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">apply plugin: &apos;apkeditor&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>apkeditor</code> 插件DSL:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apkeditor &#123;</div><div class="line">       exclude &apos;/assets/**/sb/*.so&apos;</div><div class="line"></div><div class="line">       release &#123;</div><div class="line">           exclude &apos;lib/armeabi/**&apos;</div><div class="line">       &#125;</div><div class="line">       //假定你设置了一个名为black的flavor</div><div class="line">       blackDebug &#123;</div><div class="line">           exclude &apos;/res/layout/**&apos;</div><div class="line">           exclude &apos;res/drawable*/*.xml&apos;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后正常构建或者安装. 生成的apk将会被打包成不含上述规则的资源</p>
</li>
</ol>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul>
<li>在根节点下的<code>exclude</code>， 将会应用到所有的buildType和flavor产生的 apk中.</li>
<li>指定节点下的<code>exclude</code>， 比如<code>release debug backDebug</code>, 只能应用到指定的apk中.</li>
<li><code>exclude</code>可以被多次调用.</li>
<li><code>exclude</code>的设置规则遵循 <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html#getPathMatcher-java.lang.String-" target="_blank" rel="external">Java Filesystem API</a>, 并且匹配来源来自于apk的文件结构. (你可解压缩apk, 或者通过Android Studio的分析工具 <code>Build-&gt;Analyze APK...</code>), 如图:<br> <center><img src="/2017/02/28/apkeditor/Screenshot.png" alt="1"></center></li>
<li>不要理会首个字符 <code>/</code>. 有或者没有都是可以的。</li>
<li><p>ApkEditor 无法作用到下面的这些文件。（因为这些文件在apk中是必不可少的）</p>
<ul>
<li>/META-INF/**</li>
<li>resources.arsc</li>
<li>AndroidManifest.xml</li>
</ul>
</li>
<li><p>与Android Gradle DSL 中的 <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html" target="_blank" rel="external">PackagingOptions</a> 不同</p>
<ul>
<li>经过测试PackagingOptions无法对这些资源产生影响 <code>/res/  /assets/  .classes</code></li>
<li>它的设置规则在 flavor和buildType中很不友好。</li>
</ul>
</li>
</ul>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><ul>
<li>获得源码 <a href="https://github.com/masonTool/ApkEditor" target="_blank" rel="external">GITHUB</a>.</li>
<li>访问我的个人博客 <a href="http://www.mapeiyu.com" target="_blank" rel="external">马培羽</a></li>
<li>邮件 <a href="mason.mpy@gmail.com">mason.mpy@gmail.com</a></li>
</ul>
<p><center><img src="/2017/02/28/apkeditor/longzeluola.jpg" alt="福利"></center></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ApkEditor是一个Android应用的Gradle插件. &lt;/p&gt;
&lt;p&gt;在Android应用中经常会引用一些lib或者aar，但这些第三方的包不可避免会携带一些冗余的资源, 使你的apk变得很大。本插件可以把这些资源从你的apk中剔除出来， 使你的apk变得尽可能得
    
    </summary>
    
      <category term="原创组件" scheme="http://mapeiyu.com/categories/%E5%8E%9F%E5%88%9B%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="groovy" scheme="http://mapeiyu.com/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Java Debug 之 命令行调试 （一）</title>
    <link href="http://mapeiyu.com/2017/02/16/Java-Debug-%E4%B9%8B-%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%B0%83%E8%AF%95-%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://mapeiyu.com/2017/02/16/Java-Debug-之-命令行调试-（一）/</id>
    <published>2017-02-16T01:52:27.000Z</published>
    <updated>2018-06-07T03:36:02.844Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究编译时注解的一些东东。但是发现调试貌似有点麻烦， 于是找了网上的一些资料也找到了一些处理方法。 但是都是拿来主义， 为什么我们自己不能研究出来解决方法呢？ 本着刨根问底的态度， 决定先研究一下debug的原理。本篇做为系列的第一篇， 从一个小白的角度出发， 一步步把debug研究透彻。要研究一个协议， 先找一个入手点。 平时大家都是用ide来调试， 但是本质一定是有一套协议的， 所以我们先从命令行入手。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>首先你要有一个java环境（费话么）。相信对这个主题感性趣的人，这个条件一定是具备的。</li>
<li>准备一个java工程。一个简单的.java文件也可以。这里我提供一个demo。 为了省事拿自己之前写的小工具做例子吧。 希望你能down下来， 后的讲解都是以这个demo为基础的. 路径为 <a href="https://github.com/masonTool/reflect" target="_blank" rel="external">reflect工具</a></li>
<li>本文基于ubuntu环境。其他环境都不多。</li>
</ul>
<h2 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h2><ul>
<li><p>进入命令行， 选一个目录开始我们旅程.</p>
</li>
<li><p>工程拉下来没有？ 没有就执行一下git clone </p>
</li>
</ul>
<pre><code>git clone https://github.com/masonTool/reflect
</code></pre><ul>
<li>编译工程。 按下面的步骤一步步执行</li>
</ul>
<pre><code>//进入工程目录
cd reflect  

//创建类目录, 名字whatever, 用于存放类文件
mkdir aaaa  

//编译依赖. 我们是要编译sample里面的Main.java, 因为Main.java是java的入口啊。
//说明一下:  -g 调试信息选项, 否则不能查看调试过程中的调试信息. 这也是ide的debug模式与release模式的区别
            -d 指定类文件编译进我们刚创建的aaaa目录里面
javac -g -d aaaa reflect/src/main/java/com/mason/meizu/reflect/*.java 

//编译目标类 Main.java 和 prvclass/下的所有的java文件。
//此处选项 -cp 实际是 -classpath. 指定编译上述java文件的依赖类的路径。 刚刚我们编进了aaaa, 此处用一下。
//同时也指定了 -d aaaa , 所以此次编译的结果也放进 aaaa 目录
javac -g -d aaaa -cp aaaa sample/src/com/mason/meizu/sample/prvclass/*.java sample/src/com/mason/meizu/sample/Main.java
</code></pre><ul>
<li><p>OK啦， 我们需要调试的资源就具备了。 进入 aaaa目录， tree 一下， 你看到的应该是这样</p>
<pre><code>cd aaaa

tree //如果没有命令就 sudo apt-get install tree 装一个

└── com
    └── mason
        └── meizu
            ├── reflect
            │   ├── RClass.class
            │   ├── RExecutor.class
            │   ├── RInstance.class
            │   ├── RInterface.class
            │   ├── RInterface$ProxyHandler.class
            │   └── RParam.class
            └── sample
                ├── Main.class
                ├── Main$Demo.class
                └── prvclass
                    ├── ClassA.class
                    ├── ClassB.class
                    ├── ClassC.class
                    ├── ClassD4Listener.class
                    └── ClassD4Listener$Listener.class
</code></pre></li>
</ul>
<h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><ul>
<li><p>进入调试模式</p>
<pre><code>jdb com.mason.meizu.sample.Main
</code></pre><p>  结果</p>
<pre><code>Initializing jdb ...
&gt; 
</code></pre></li>
<li><p>设置断点</p>
<p>  输入</p>
<pre><code>stop at com.mason.meizu.sample.Main:30//此处30指定断点在源文件的第30行
</code></pre><p>  结果</p>
<pre><code>Deferring breakpoint com.mason.meizu.sample.Main:30.
It will be set after the class is loaded.
</code></pre><p>  运行程程，到断点处停止。 输入</p>
<pre><code>run
</code></pre><p>  结果</p>
<pre><code>run com.mason.meizu.sample.Main
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
&gt; 
VM Started: Set deferred breakpoint com.mason.meizu.sample.Main:30

Breakpoint hit: &quot;thread=main&quot;, com.mason.meizu.sample.Main.main(), line=30 bci=10

main[1] 
</code></pre><p>  看一下当前的变量, 输入 </p>
<pre><code>locals
</code></pre><p>  结果</p>
<pre><code>Method arguments:
args = instance of java.lang.String[0] (id=408)
Local variables:
clazzA = instance of com.mason.meizu.reflect.RClass(id=409)
main[1]
</code></pre><p>  看一下变量clazzA的详细情况, 输入</p>
<pre><code>dump clazzA
</code></pre><p>  结果</p>
<pre><code>clazzA = {
    sClassMap: instance of java.util.HashMap(id=410)
    sConstructorMap: instance of java.util.HashMap(id=411)
    className: &quot;com.mason.meizu.sample.prvclass.ClassA&quot;
    classObj: instance of java.lang.Class(reflected class=com.mason.meizu.sample.prvclass.ClassA, id=407)
    com.mason.meizu.reflect.RExecutor.sMethodMap: instance of java.util.HashMap(id=413)
    com.mason.meizu.reflect.RExecutor.sFieldMap: instance of java.util.HashMap(id=414)
}
main[1] 
</code></pre><p>  看一下当前运行的线程. 输入</p>
<pre><code>where all
</code></pre><p>  结果</p>
<pre><code>Signal Dispatcher:
Finalizer:
  [1] java.lang.Object.wait (native method)
  [2] java.lang.ref.ReferenceQueue.remove (ReferenceQueue.java:143)
  [3] java.lang.ref.ReferenceQueue.remove (ReferenceQueue.java:164)
  [4] java.lang.ref.Finalizer$FinalizerThread.run (Finalizer.java:209)
Reference Handler:
  [1] java.lang.Object.wait (native method)
  [2] java.lang.Object.wait (Object.java:502)
  [3] java.lang.ref.Reference.tryHandlePending (Reference.java:191)
  [4] java.lang.ref.Reference$ReferenceHandler.run (Reference.java:153)
main:
  [1] com.mason.meizu.sample.Main.main (Main.java:30)
main[1] 
</code></pre></li>
</ul>
<ul>
<li><p>类似的命令还有如下， 建议你都试一下</p>
<ul>
<li>next  是执行下一步，相当于Eclipse中的F6</li>
<li>stop in 进入函数实现, 相当于Eclipse中的F5</li>
<li>stop out 运行完当前函数, 相当于Eclipse中的F7</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了一个命令行编译与命令行调试的过程。 这部分工作在日常的开发中都被我们的ide做了。 如果觉得不详细， 看看那个真男人是怎么告诉我们的:</p>
<pre><code>man jdb
</code></pre><p>抽时间我再把他翻译一下， 方便理解。</p>
<p><center><img src="/2017/02/16/Java-Debug-之-命令行调试-（一）/ssssss.jpg" alt="福利"></center></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究编译时注解的一些东东。但是发现调试貌似有点麻烦， 于是找了网上的一些资料也找到了一些处理方法。 但是都是拿来主义， 为什么我们自己不能研究出来解决方法呢？ 本着刨根问底的态度， 决定先研究一下debug的原理。本篇做为系列的第一篇， 从一个小白的角度出发， 一步步
    
    </summary>
    
      <category term="Java Debug" scheme="http://mapeiyu.com/categories/Java-Debug/"/>
    
    
      <category term="java" scheme="http://mapeiyu.com/tags/java/"/>
    
      <category term="debug" scheme="http://mapeiyu.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>吐槽</title>
    <link href="http://mapeiyu.com/2017/02/13/tu-cao/"/>
    <id>http://mapeiyu.com/2017/02/13/tu-cao/</id>
    <published>2017-02-13T08:13:09.000Z</published>
    <updated>2018-06-07T03:36:02.844Z</updated>
    
    <content type="html"><![CDATA[<p>人如果不时常问问自己内心，那就会处于一种浑浑噩噩的状态。我就时常这样,偶尔清醒过来嘀咕两句，随后又甘心沉沦进去。然而心中却依然怀揣的自认为是理想的白日梦，以便于沉沦的心安理得。</p>
<p>我想到一个词“惰性”，人都有惰性。拷问自己本身就是一件痛苦的事。忙碌有时也是一种惰性，很多人忙碌并不是勤劳，仅仅是因为习惯了忙碌。习惯是一种让人舒服的状态，也是一种惰性。 </p>
<p>生活的状态其实都很随性的，没有一种标准定义什么是好与不好。但财富，在肤浅的层面上却能给人最直观的判断。不要理解的过于深刻，此处财富就是通俗意义上的money。财富好处不言自明。人总共就两种欲望，物质层面与精神层面。财富在这两个方面都能满足。</p>
<p>曾经，甚至我在混沌状态中还在模糊的意识中认为钱不是问题，老子有的是时间。真的以为“赚他一个亿”其实也不是什么笑话。一个亿？也不多嘛。可是细细算个帐下来，哪怕把这个任务均分到30年，每天都需要1万的进帐。貌似有点遥远。</p>
<p>有些人把感恩记在本子上，记录生活中点滴的美好，它的心中充满阳光，甚至照亮了周围。有些却把缺憾记在本子上，记录美好生活中的点滴缺点，时不时拿来回味咀嚼，偿到苦处就破口大骂。或许根源在于自私吧，整天想着自己，整个人就会被黑暗笼罩。心存善念的面对别人，才会让心情阳光明媚。</p>
<p>套几句歌词以自勉，因为我只是在胡扯。</p>
<p><center>该不该搁下重重的壳</center></p>
<p><center>寻找到底哪里有蓝天</center></p>
<p><center>随着轻轻的风轻轻地飘</center></p>
<p><center>历经的伤都不感觉疼</center></p>
<p><center>我要一步一步往上爬</center></p>
<p><center>等待阳光静静看着它的脸</center></p>
<p><center>小小的天有大大的梦想</center></p>
<p><center>重重的壳裹着轻轻地仰望</center></p>
<p><center>我要一步一步往上爬</center></p>
<p><center>在最高点乘着叶片往前飞</center></p>
<p><center>小小的天流过的泪和汗</center></p>
<p><center>总有一天我有属于我的天</center></p>
<p><center><img src="/2017/02/13/tu-cao/timg.jpeg" alt="云淡风轻"></center></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人如果不时常问问自己内心，那就会处于一种浑浑噩噩的状态。我就时常这样,偶尔清醒过来嘀咕两句，随后又甘心沉沦进去。然而心中却依然怀揣的自认为是理想的白日梦，以便于沉沦的心安理得。&lt;/p&gt;
&lt;p&gt;我想到一个词“惰性”，人都有惰性。拷问自己本身就是一件痛苦的事。忙碌有时也是一种惰
    
    </summary>
    
      <category term="随笔" scheme="http://mapeiyu.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>groovy closure</title>
    <link href="http://mapeiyu.com/2017/02/13/groovy-closure/"/>
    <id>http://mapeiyu.com/2017/02/13/groovy-closure/</id>
    <published>2017-02-13T03:18:28.000Z</published>
    <updated>2018-06-07T03:36:02.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>闭包是可以用作函数参数和方法参数的代码块. 其实Groovy的闭包更象是一个“代码块”或者方法指针，代码在某处被定义然后在其后的调用处执行</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def square = &#123;it * it&#125; // 定义一个叫square的闭包。it是默认的 参数名称</div><div class="line">assert 4 == square(2) // 使用闭包</div><div class="line">assert [1,4,9] == [1,2,3].collect(square) // 使用闭包</div><div class="line"></div><div class="line">def closure = &#123; param -&gt; println(&quot;hello $&#123;param&#125;&quot;) &#125;</div><div class="line">closure.call(&quot;world!&quot;)</div><div class="line"> </div><div class="line">def closure = &#123; greeting, name -&gt; println(greeting + name) &#125;</div><div class="line">closure.call(&quot;hello &quot;, &quot;world!&quot;)</div></pre></td></tr></table></figure>
<p>闭包用“{}”括起，“-&gt;”前面是参数，后面是处理语句，可以直接调用，也可以使用call调用。不管那种调用，最后groovy编译器都会把编译成对doCall方法的调用，这是groovy对闭包的一个隐藏方法。如果只有一个参数，可以不写，而使用缺省的参数“it”。 如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def closure = &#123; println(&quot;hello $&#123;it&#125;&quot;) &#125;</div><div class="line">closure.call(&quot;world!&quot;)</div></pre></td></tr></table></figure>
<p>闭包还可当作变量返回</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def localMethod() &#123;</div><div class="line">  def localVariable = new java.util.Date()</div><div class="line">  return &#123; println localVariable &#125;</div><div class="line">&#125;</div><div class="line">def clos = localMethod()</div><div class="line">clos()</div></pre></td></tr></table></figure>
<h2 id="Groovy闭包的隐含变量"><a href="#Groovy闭包的隐含变量" class="headerlink" title="Groovy闭包的隐含变量"></a>Groovy闭包的隐含变量</h2><ul>
<li>it：默认的参数名，调用是如果没有传参数，it为null</li>
<li>this : 跟Java一样，是定义闭包所在类的一个引用，不管有多少层闭包嵌套，this指向的都是最上层的类。</li>
<li>owner : 封闭闭包的对象(如果只有一层闭包就是this，如果有多层闭包嵌套就是含有此闭包的上层闭包)</li>
<li>delegate :缺省值是owner，但是可以改变，后面详说。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class Class1 &#123;</div><div class="line">  def closure = &#123;</div><div class="line">    println &quot; ============================== &quot;</div><div class="line">    println &quot;this = &quot;+ this.class.name</div><div class="line">    println &quot;owner = &quot; + owner.class.name</div><div class="line">    println &quot;delegate = &quot; + delegate.class.name</div><div class="line">    def nestedClos = &#123;</div><div class="line">        println &quot; ============================== &quot;</div><div class="line">        println &quot;this = &quot;+ this.class.name</div><div class="line">        println &quot;owner = &quot; + owner.class.name</div><div class="line">        println &quot;delegate = &quot; + delegate.class.name</div><div class="line">      def thirdClos = &#123;</div><div class="line">            println &quot; ============================== &quot;</div><div class="line">            println &quot;this = &quot;+ this.class.name</div><div class="line">            println &quot;owner = &quot; + owner.class.name</div><div class="line">            println &quot;delegate = &quot; + delegate.class.name</div><div class="line">      &#125;</div><div class="line">      thirdClos()  </div><div class="line">    &#125;</div><div class="line">    nestedClos()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">def clos = new Class1().closure</div><div class="line">//clos.delegate = this</div><div class="line">clos()</div><div class="line">执行结果：</div><div class="line"> ============================== </div><div class="line">this = Class1</div><div class="line">owner = Class1</div><div class="line">delegate = Class1</div><div class="line"> ============================== </div><div class="line">this = Class1</div><div class="line">owner = Class1$_closure1</div><div class="line">delegate = Class1$_closure1</div><div class="line"> ============================== </div><div class="line">this = Class1</div><div class="line">owner = Class1$_closure1_closure2</div><div class="line">delegate = Class1$_closure1_closure2</div></pre></td></tr></table></figure>
<h2 id="闭包实现接口"><a href="#闭包实现接口" class="headerlink" title="闭包实现接口"></a>闭包实现接口</h2><ul>
<li>如果接口只有一个方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">interface Test</div><div class="line">&#123;</div><div class="line"> def test()</div><div class="line">&#125;</div><div class="line"></div><div class="line">def test = &#123;</div><div class="line"> println&apos;ok&apos;</div><div class="line">&#125; as Test</div><div class="line"></div><div class="line">test.test()</div></pre></td></tr></table></figure>
<ul>
<li>多方法接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">interface MultiFuncTest</div><div class="line">&#123;</div><div class="line">    def test1()</div><div class="line">    def test2(str)</div><div class="line">&#125;</div><div class="line"> </div><div class="line">def impl = [test1:&#123;println&apos;test&apos;&#125;,</div><div class="line">        test2:&#123;str -&gt; println str&#125;] as MultiFuncTest</div><div class="line"></div><div class="line">impl.test1()</div><div class="line">impl.test2(&apos;ok&apos;)</div></pre></td></tr></table></figure>
<h2 id="delegate委托"><a href="#delegate委托" class="headerlink" title="delegate委托"></a>delegate委托</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Dog&#123;</div><div class="line">    def play = &#123;</div><div class="line">      &quot;wang wang!&quot;</div><div class="line">    &#125;</div><div class="line">    def childmind = &#123;</div><div class="line">        println       delegate.play();      </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class Cat &#123;</div><div class="line">    def play = &#123;&quot;mi mi !&quot;&#125;</div><div class="line">&#125;</div><div class="line">def dog = new Dog()</div><div class="line">def cat = new Cat()</div><div class="line">dog.childmind()</div><div class="line">dog.childmind.delegate  = cat;</div><div class="line">dog.childmind()</div></pre></td></tr></table></figure>
<p><center><img src="/2017/02/13/groovy-closure/11.jpg" alt="料"></center></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;闭包是可以用作函数参数和方法参数的代码块. 其实Groovy的闭包更象是一个“代码块”或者方法指针，代码在某处被定义然后在其后的调用处执行&lt;
    
    </summary>
    
      <category term="gradle开发" scheme="http://mapeiyu.com/categories/gradle%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="groovy" scheme="http://mapeiyu.com/tags/groovy/"/>
    
      <category term="gradle" scheme="http://mapeiyu.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>反射工具reflect更新到2.2.0版本(有重料)</title>
    <link href="http://mapeiyu.com/2017/02/09/reflect-update-2-2-0/"/>
    <id>http://mapeiyu.com/2017/02/09/reflect-update-2-2-0/</id>
    <published>2017-02-09T06:46:38.000Z</published>
    <updated>2018-06-07T03:36:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>增加反射interface的实例化支持. 还添加了中文文档说明哦。</p>
<p><a href="https://github.com/masonTool/reflect" target="_blank" rel="external">点我传送门</a>  </p>
<p><center><img src="/2017/02/09/reflect-update-2-2-0/JYEY6NH06E91.jpg" alt="我有料"></center></p>
<p><center><img src="/2017/02/09/reflect-update-2-2-0/jinguanzhang.jpg" alt=""></center></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;增加反射interface的实例化支持. 还添加了中文文档说明哦。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/masonTool/reflect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我传送门&lt;/a&gt;  &lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="原创组件" scheme="http://mapeiyu.com/categories/%E5%8E%9F%E5%88%9B%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="java" scheme="http://mapeiyu.com/tags/java/"/>
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="reflect" scheme="http://mapeiyu.com/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>RX操作符概述</title>
    <link href="http://mapeiyu.com/2016/11/07/rx-operation/"/>
    <id>http://mapeiyu.com/2016/11/07/rx-operation/</id>
    <published>2016-11-07T10:43:34.000Z</published>
    <updated>2018-06-07T03:36:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>ReactiveX的每种编程语言的实现都实现了一组操作符的集合。不同的实现之间有很多重叠的部分，也有一些操作符只存在特定的实现中。每种实现都倾向于用那种编程语言中他们熟悉的上下文中相似的方法给这些操作符命名。</p>
<p>本文首先会给出ReactiveX的核心操作符列表和对应的文档链接，后面还有一个决策树用于帮助你根据具体的场景选择合适的操作符。最后有一个语言特定实现的按字母排序的操作符列表。</p>
<p>如果你想实现你自己的操作符，可以参考这里：实现自定义操作符</p>
<p>创建操作</p>
<p>用于创建Observable的操作符</p>
<p>Create — 通过调用观察者的方法从头创建一个Observable<br>Defer — 在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable<br>Empty/Never/Throw — 创建行为受限的特殊Observable<br>From — 将其它的对象或数据结构转换为Observable<br>Interval — 创建一个定时发射整数序列的Observable<br>Just — 将对象或者对象集合转换为一个会发射这些对象的Observable<br>Range — 创建发射指定范围的整数序列的Observable<br>Repeat — 创建重复发射特定的数据或数据序列的Observable<br>Start — 创建发射一个函数的返回值的Observable<br>Timer — 创建在一个指定的延迟之后发射单个数据的Observable<br>变换操作</p>
<p>这些操作符可用于对Observable发射的数据进行变换，详细解释可以看每个操作符的文档</p>
<p>uffer — 缓存，可以简单的理解为缓存，它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个<br>latMap — 扁平映射，将Observable发射的数据变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable，可以认为是一个将嵌套的数据结构展开的过程。<br>roupBy — 分组，将原来的Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据<br>ap — 映射，通过对序列的每一项都应用一个函数变换Observable发射的数据，实质是对序列中的每一项执行一个函数，函数的参数就是这个数据项<br>can — 扫描，对Observable发射的每一项数据应用一个函数，然后按顺序依次发射这些值<br>indow — 窗口，定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项。类似于Buffer，但Buffer发射的是数据，Window发射的是Observable，每一个Observable发射原始Observable的数据的一个子集<br>过滤操作</p>
<p>这些操作符用于从Observable发射的数据中进行选择</p>
<p>Debounce — 只有在空闲了一段时间后才发射数据，通俗的说，就是如果一段时间没有操作，就执行一次操作<br>Distinct — 去重，过滤掉重复数据项<br>ElementAt — 取值，取特定位置的数据项<br>Filter — 过滤，过滤掉没有通过谓词测试的数据项，只发射通过测试的<br>First — 首项，只发射满足条件的第一条数据<br>IgnoreElements — 忽略所有的数据，只保留终止通知(onError或onCompleted)<br>Last — 末项，只发射最后一条数据<br>Sample — 取样，定期发射最新的数据，等于是数据抽样，有的实现里叫ThrottleFirst<br>Skip — 跳过前面的若干项数据<br>SkipLast — 跳过后面的若干项数据<br>Take — 只保留前面的若干项数据<br>TakeLast — 只保留后面的若干项数据<br>组合操作</p>
<p>组合操作符用于将多个Observable组合成一个单一的Observable</p>
<p>And/Then/When — 通过模式(And条件)和计划(Then次序)组合两个或多个Observable发射的数据集<br>CombineLatest — 当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然- 后发射这个函数的结果<br>Join — 无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射<br>Merge — 将两个Observable发射的数据组合并成一个<br>StartWith — 在发射原来的Observable的数据序列之前，先发射一个指定的数据序列或数据项<br>Switch — 将一个发射Observable序列的Observable转换为这样一个Observable：它逐个发射那些Observable最近发射的数据<br>Zip — 打包，使用一个指定的函数将多个Observable发射的数据组合在一起，然后将这个函数的结果作为单项数据发射<br>错误处理</p>
<p>这些操作符用于从错误通知中恢复</p>
<p>Catch — 捕获，继续序列操作，将错误替换为正常的数据，从onError通知中恢复<br>Retry — 重试，如果Observable发射了一个错误通知，重新订阅它，期待它正常终止<br>辅助操作</p>
<p>一组用于处理Observable的操作符</p>
<p>Delay — 延迟一段时间发射结果数据<br>Do — 注册一个动作占用一些Observable的生命周期事件，相当于Mock某个操作<br>Materialize/Dematerialize — 将发射的数据和通知都当做数据发射，或者反过来<br>ObserveOn — 指定观察者观察Observable的调度程序（工作线程）<br>Serialize — 强制Observable按次序发射数据并且功能是有效的<br>Subscribe — 收到Observable发射的数据和通知后执行的操作<br>SubscribeOn — 指定Observable应该在哪个调度程序上执行<br>TimeInterval — 将一个Observable转换为发射两个数据之间所耗费时间的Observable<br>Timeout — 添加超时机制，如果过了指定的一段时间没有发射数据，就发射一个错误通知<br>Timestamp — 给Observable发射的每个数据项添加一个时间戳<br>Using — 创建一个只在Observable的生命周期内存在的一次性资源<br>条件和布尔操作</p>
<p>这些操作符可用于单个或多个数据项，也可用于Observable</p>
<p>All — 判断Observable发射的所有的数据项是否都满足某个条件<br>Amb — 给定多个Observable，只让第一个发射数据的Observable发射全部数据<br>Contains — 判断Observable是否会发射一个指定的数据项<br>DefaultIfEmpty — 发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据<br>SequenceEqual — 判断两个Observable是否按相同的数据序列<br>SkipUntil — 丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据<br>SkipWhile — 丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据<br>TakeUntil — 发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知<br>TakeWhile — 发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据<br>算术和聚合操作</p>
<p>这些操作符可用于整个数据序列</p>
<p>Average — 计算Observable发射的数据序列的平均值，然后发射这个结果<br>Concat — 不交错的连接多个Observable的数据<br>Count — 计算Observable发射的数据个数，然后发射这个结果<br>Max — 计算并发射数据序列的最大值<br>Min — 计算并发射数据序列的最小值<br>Reduce — 按顺序对数据序列的每一个应用某个函数，然后返回这个值<br>Sum — 计算并发射数据序列的和<br>连接操作</p>
<p>一些有精确可控的订阅行为的特殊Observable</p>
<p>Connect — 指示一个可连接的Observable开始发射数据给订阅者<br>Publish — 将一个普通的Observable转换为可连接的<br>RefCount — 使一个可连接的Observable表现得像一个普通的Observable<br>Replay — 确保所有的观察者收到同样的数据序列，即使他们在Observable开始发射数据之后才订阅<br>转换操作</p>
<p>To — 将Observable转换为其它的对象或数据结构<br>Blocking 阻塞Observable的操作符<br>操作符决策树</p>
<p>几种主要的需求</p>
<p>直接创建一个Observable（创建操作）<br>组合多个Observable（组合操作）<br>对Observable发射的数据执行变换操作（变换操作）<br>从Observable发射的数据中取特定的值（过滤操作）<br>转发Observable的部分值（条件/布尔/过滤操作）<br>对Observable发射的数据序列求值（算术/聚合操作）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReactiveX的每种编程语言的实现都实现了一组操作符的集合。不同的实现之间有很多重叠的部分，也有一些操作符只存在特定的实现中。每种实现都倾向于用那种编程语言中他们熟悉的上下文中相似的方法给这些操作符命名。&lt;/p&gt;
&lt;p&gt;本文首先会给出ReactiveX的核心操作符列表和
    
    </summary>
    
      <category term="RX" scheme="http://mapeiyu.com/categories/RX/"/>
    
    
      <category term="java" scheme="http://mapeiyu.com/tags/java/"/>
    
      <category term="RX" scheme="http://mapeiyu.com/tags/RX/"/>
    
  </entry>
  
  <entry>
    <title>不做工作狂</title>
    <link href="http://mapeiyu.com/2016/10/15/Workaholism/"/>
    <id>http://mapeiyu.com/2016/10/15/Workaholism/</id>
    <published>2016-10-15T14:39:58.000Z</published>
    <updated>2018-06-07T03:36:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>我们的文化颂扬工作狂思想。我们听说人们会午夜鏖战。他们开夜车而在办公室睡觉。 这被认为是一种把全身投入一个项目的标志。工作的总量不等于过量的工作。<br>这样的工作狂不仅没必要,而且很傻。做得多并不意味着你足够用心或者完成得更多。仅仅意味着你做得多。</p>
<p>工作狂最后制造的麻烦比解决的麻烦多。首先,工作狂好似没有合理利用时间。当筋疲力尽时,会制造更多麻烦。工作狂也抓不住要点。他们想用砸大把大把的时间来解决事情。他们想用蛮干来弥补一些小技巧。结果就是粗野的解决。</p>
<p>他们甚至会制造危机。他们不会去找高效的方法因为他们确实喜欢加班。他们享受英雄般的感觉。他们制造出问题(通常是无意识地)以便多多工作。工作狂若是不留到很晚会觉得仅仅花合理的时间工作是不合理的。这会四处充满内疚感和低士气。并且,产生理所当然的想法──留守很晚是职责之外的事,就算他们不是真的富有成效。<br>如果你所做的都是工作,你不太可能得到很好的评价。你的价值和决定会以误解告终。你不能判断额外的努力是值得还是不值得。你只会彻底累垮。没有人能疲倦中做出明晰的决定。<br>  最后,工作狂并不比非工作狂达成更多目标。他们也许会宣称自己是完美主义者,但那只是意味着浪费时间在注意一些不重要的细节而不是着手于下一个任务。 </p>
<p>  工作狂不是英雄。他们不是在节约时间而是在浪费。真正的英雄已经回到家中,因为她找到更快的方法把工作做好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的文化颂扬工作狂思想。我们听说人们会午夜鏖战。他们开夜车而在办公室睡觉。 这被认为是一种把全身投入一个项目的标志。工作的总量不等于过量的工作。&lt;br&gt;这样的工作狂不仅没必要,而且很傻。做得多并不意味着你足够用心或者完成得更多。仅仅意味着你做得多。&lt;/p&gt;
&lt;p&gt;工作狂最
    
    </summary>
    
      <category term="书摘" scheme="http://mapeiyu.com/categories/%E4%B9%A6%E6%91%98/"/>
    
    
  </entry>
  
  <entry>
    <title>blog的hexo配置移植方法</title>
    <link href="http://mapeiyu.com/2016/10/09/hexo-blog-config/"/>
    <id>http://mapeiyu.com/2016/10/09/hexo-blog-config/</id>
    <published>2016-10-09T03:59:08.000Z</published>
    <updated>2018-06-07T03:36:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>介绍如何将个人博客的hexo后台移植到另外的设备上, 使可以多平台上可以同步操作博客后台.</p>
<h3 id="0-进入到你的hexo目录-执行git-init-生成git仓库-将git仓库上传到github"><a href="#0-进入到你的hexo目录-执行git-init-生成git仓库-将git仓库上传到github" class="headerlink" title="0. 进入到你的hexo目录, 执行git init 生成git仓库, 将git仓库上传到github."></a>0. 进入到你的hexo目录, 执行git init 生成git仓库, 将git仓库上传到github.</h3><pre><code>//初始化仓库
cd hexo
git init
//提交init
git add .gitignore
git add .npmignore
git add _config.yml
git add source/
git add themes/
git commit -a -m init
//上传github服务器, 首先你要在github上添加了新的远程仓库
git remote add github git@gitlab.meizu.com:xxxx/xxxx.git
push -u github master
</code></pre><p>将配置文件上传至github, 看我的配置文件为<a href="https://github.com/masonTool/blog_config" target="_blank" rel="external">GITHUB</a></p>
<h3 id="1-进入移植设备-将本工程下拉-会生成目录blog-config"><a href="#1-进入移植设备-将本工程下拉-会生成目录blog-config" class="headerlink" title="1. 进入移植设备. 将本工程下拉, 会生成目录blog_config"></a>1. 进入移植设备. 将本工程下拉, 会生成目录blog_config</h3><pre><code>mkdir temp
git clone git@github.com:masonTool/blog_config.git
</code></pre><h3 id="2-再拷贝一份blog-config-命名为blog-config1-进入目录"><a href="#2-再拷贝一份blog-config-命名为blog-config1-进入目录" class="headerlink" title="2. 再拷贝一份blog_config(命名为blog_config1), 进入目录"></a>2. 再拷贝一份blog_config(命名为blog_config1), 进入目录</h3><pre><code>cp -r blog_config/ blog_config1
cd blog_config1
</code></pre><h3 id="3-依次执行指令"><a href="#3-依次执行指令" class="headerlink" title="3. 依次执行指令"></a>3. 依次执行指令</h3><pre><code>npm install hexo --save
hexo init
npm install hexo-deployer-git --save
</code></pre><h3 id="4-执行完上一步-会生成文件夹node-modules-文件夹中应该有如下的文件"><a href="#4-执行完上一步-会生成文件夹node-modules-文件夹中应该有如下的文件" class="headerlink" title="4. 执行完上一步, 会生成文件夹node_modules, 文件夹中应该有如下的文件"></a>4. 执行完上一步, 会生成文件夹node_modules, 文件夹中应该有如下的文件</h3><pre><code>hexo
hexo-deployer-git
dhexo-generator-archive
hexo-generator-category
hexo-generator-index
hexo-generator-tag
hexo-renderer-ejs
hexo-renderer-marked
hexo-renderer-stylus
hexo-server
</code></pre><h3 id="5-移动node-modules到原blog-config文件中-再删除blog-config1"><a href="#5-移动node-modules到原blog-config文件中-再删除blog-config1" class="headerlink" title="5. 移动node_modules到原blog_config文件中. 再删除blog_config1"></a>5. 移动node_modules到原blog_config文件中. 再删除blog_config1</h3><p>完成了移植. 此时你可以在多设备上写文章. 通过git来管理配置了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍如何将个人博客的hexo后台移植到另外的设备上, 使可以多平台上可以同步操作博客后台.&lt;/p&gt;
&lt;h3 id=&quot;0-进入到你的hexo目录-执行git-init-生成git仓库-将git仓库上传到github&quot;&gt;&lt;a href=&quot;#0-进入到你的hexo目录-执行git
    
    </summary>
    
      <category term="博客开发" scheme="http://mapeiyu.com/categories/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="hexo" scheme="http://mapeiyu.com/tags/hexo/"/>
    
      <category term="github" scheme="http://mapeiyu.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Java Reflect Tool</title>
    <link href="http://mapeiyu.com/2016/10/08/java-reflect-tool/"/>
    <id>http://mapeiyu.com/2016/10/08/java-reflect-tool/</id>
    <published>2016-10-08T12:53:02.000Z</published>
    <updated>2018-06-07T03:36:02.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>  Java reflect operation always confuse me, cause is not so intuitive. And it’s low efficiency lead us can not use it very frequently. This reflect tool can help you simplify the operation and cache the reflect results. Hope can help you.</p>
<h2 id="Library-projects"><a href="#Library-projects" class="headerlink" title="Library projects"></a>Library projects</h2><p>See the project in <a href="https://github.com/masonTool/reflect" target="_blank" rel="external">GITHUB</a></p>
<p>Download <a href="https://search.maven.org/remote_content?g=com.github.masontool&amp;a=reflect&amp;v=LATEST" target="_blank" rel="external">the latest JAR</a> or grab via Maven:</p>
<p>For gradle:</p>
<pre><code>compile &apos;com.github.masontool:reflect:2.1.0&apos;
</code></pre><p>For maven:</p>
<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;com.github.masontool&lt;/groupId&gt;
  &lt;artifactId&gt;reflect&lt;/artifactId&gt;
  &lt;version&gt;2.1.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><h2 id="Useful"><a href="#Useful" class="headerlink" title="Useful"></a>Useful</h2><p>I can show you the sample , it’s simple;</p>
<p>ClassA:</p>
<pre><code>package com.mason.meizu.sample.prvclass;
class ClassA {
    protected static String staticString = &quot;HELLO&quot;;
    private String normalString = &quot;WORLD&quot;;
    private static Integer plus(Integer a, Integer b) {
        return a+b;
    }
    private long minus(long a, long b) {
        return a - b;
    }
    private static int plus(ClassB b, ClassC c) {
        return b.value + c.value;
    }
}
</code></pre><p>ClassB:</p>
<pre><code>package com.mason.meizu.sample.prvclass;
class ClassB {
    int value = 5;
}
</code></pre><p>ClassC:</p>
<pre><code>package com.mason.meizu.sample.prvclass;
class ClassC {
    int value = 4;
}
</code></pre><p>We suppose all the classes, parameters, methods should be reflected. You can do like this:</p>
<ol>
<li><p>Get / Set static value in class.</p>
<pre><code>RClass clazzA = new RClass(&quot;com.mason.meizu.sample.prvclass.ClassA&quot;);
clazzA.setValue(&quot;staticString&quot;, &quot;static changed!!!!!&quot;);
String staticString = clazzA.getValue(&quot;staticString&quot;);
</code></pre></li>
<li><p>Get / Set normal value in class.</p>
<pre><code>RInstance instanceA = clazzA.newWrappedInstance();
instanceA.setValue(&quot;normalString&quot;, &quot;normal changed!!!!!&quot;);
String normalString = instanceA.getValue(&quot;normalString&quot;);
</code></pre></li>
<li><p>Excute static method.</p>
<pre><code>Integer plusResult = clazzA.execute(&quot;plus&quot;, Integer.class, 5, Integer.class, 4);
</code></pre></li>
<li><p>Excute normal method.</p>
<pre><code>long minusResult = instanceA.execute(&quot;minus&quot;, long.class, 5, long.class, 4);
</code></pre></li>
<li><p>Support nested call. Here is a complex sample</p>
<pre><code>RClass clazzB = new RClass(&quot;com.mason.meizu.sample.prvclass.ClassB&quot;);
RClass clazzC = new RClass(&quot;com.mason.meizu.sample.prvclass.ClassC&quot;);
int complexResult1 = clazzA.execute(&quot;plus&quot;,
        clazzB, clazzB.newInstance(),
        clazzC, clazzC.newInstance());
</code></pre></li>
</ol>
<h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>   Any question you can contact me with email 307416073@qq.com.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;  Java reflect operation always confus
    
    </summary>
    
      <category term="原创组件" scheme="http://mapeiyu.com/categories/%E5%8E%9F%E5%88%9B%E7%BB%84%E4%BB%B6/"/>
    
    
      <category term="java" scheme="http://mapeiyu.com/tags/java/"/>
    
      <category term="android" scheme="http://mapeiyu.com/tags/android/"/>
    
      <category term="reflect" scheme="http://mapeiyu.com/tags/reflect/"/>
    
  </entry>
  
</feed>
